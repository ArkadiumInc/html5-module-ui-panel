(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\lib\\xml.js":[function(require,module,exports){
var xml2js = require('xml2js')

function xml() {

    this.parse = function(value, stripRoots) {
        stripRoots = stripRoots || false
        var parser = new xml2js.Parser({explicitRoot: !stripRoots, explicitArray: false});
        var results = {};
        parser.parseString(value,function(err,r){
            if (err) {
                throw err;
            } else {
                results = r;
            }
        });
        return (stripRoots) ? _stripXmlBloat(results) : results;
    };

    this.stringify = function(value, root, child) {
        var writer = new xml2js.Builder({explicitRoot: false});
        value = root && _addxmlBloat(value, root, child) || value;
        return writer.buildObject(value);
    };

    this.child = function(root) {
        return _singular(root);
    };

    var _stripXmlBloat = function(value) {

        var cnt = 0;
        var root = null;
        var isVal = false;

        for (var p in value) {
            root = p;
            isVal = !(typeof value[p] == "object") && !Array.isArray(value[p]);
            cnt++
        }

        if (root && cnt ==1 && !isVal) {
            return (Array.isArray(value[p])) ? value[root] : [value[root]];
        }

        return value;
    }

    var _addxmlBloat = function(value, root, child) {
        if (root) {
            var result = {};

            if (Array.isArray(value)) {
                var records = {};
                child = child || _singular(root);
                records[child] = value;
                result[root] = records;
            } else {
                result[root] = value;
            }

            return result
        }
        return value;
    }

    var _singular = function(value) {
        if (value && value != "") {
            if (value.slice(-1) == "s") {
                return value.slice(0,-1);
            }

            return value + "Record";
        }

        return value;
    };


}

exports = module.exports = new xml();

},{"xml2js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\lib\\xml2js.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\lib\\bom.js":[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var xml2js;

  xml2js = require('../lib/xml2js');

  exports.stripBOM = function(str) {
    if (str[0] === '\uFEFF') {
      return str.substring(1);
    } else {
      return str;
    }
  };

}).call(this);

},{"../lib/xml2js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\lib\\xml2js.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\lib\\processors.js":[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var prefixMatch;

  prefixMatch = new RegExp(/(?!xmlns)^.*:/);

  exports.normalize = function(str) {
    return str.toLowerCase();
  };

  exports.firstCharLowerCase = function(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
  };

  exports.stripPrefix = function(str) {
    return str.replace(prefixMatch, '');
  };

  exports.parseNumbers = function(str) {
    if (!isNaN(str)) {
      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
    }
    return str;
  };

  exports.parseBooleans = function(str) {
    if (/^(?:true|false)$/i.test(str)) {
      str = str.toLowerCase() === 'true';
    }
    return str;
  };

}).call(this);

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\lib\\xml2js.js":[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var bom, builder, escapeCDATA, events, isEmpty, processName, processors, requiresCDATA, sax, setImmediate, wrapCDATA,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sax = require('sax');

  events = require('events');

  builder = require('xmlbuilder');

  bom = require('./bom');

  processors = require('./processors');

  setImmediate = require('timers').setImmediate;

  isEmpty = function(thing) {
    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
  };

  processName = function(processors, processedName) {
    var i, len, process;
    for (i = 0, len = processors.length; i < len; i++) {
      process = processors[i];
      processedName = process(processedName);
    }
    return processedName;
  };

  requiresCDATA = function(entry) {
    return entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0;
  };

  wrapCDATA = function(entry) {
    return "<![CDATA[" + (escapeCDATA(entry)) + "]]>";
  };

  escapeCDATA = function(entry) {
    return entry.replace(']]>', ']]]]><![CDATA[>');
  };

  exports.processors = processors;

  exports.defaults = {
    "0.1": {
      explicitCharkey: false,
      trim: true,
      normalize: true,
      normalizeTags: false,
      attrkey: "@",
      charkey: "#",
      explicitArray: false,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: false,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      childkey: '@@',
      charsAsChildren: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      attrValueProcessors: null,
      tagNameProcessors: null,
      valueProcessors: null,
      emptyTag: ''
    },
    "0.2": {
      explicitCharkey: false,
      trim: false,
      normalize: false,
      normalizeTags: false,
      attrkey: "$",
      charkey: "_",
      explicitArray: true,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: true,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      preserveChildrenOrder: false,
      childkey: '$$',
      charsAsChildren: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      attrValueProcessors: null,
      tagNameProcessors: null,
      valueProcessors: null,
      rootName: 'root',
      xmldec: {
        'version': '1.0',
        'encoding': 'UTF-8',
        'standalone': true
      },
      doctype: null,
      renderOpts: {
        'pretty': true,
        'indent': '  ',
        'newline': '\n'
      },
      headless: false,
      chunkSize: 10000,
      emptyTag: '',
      cdata: false
    }
  };

  exports.ValidationError = (function(superClass) {
    extend(ValidationError, superClass);

    function ValidationError(message) {
      this.message = message;
    }

    return ValidationError;

  })(Error);

  exports.Builder = (function() {
    function Builder(opts) {
      var key, ref, value;
      this.options = {};
      ref = exports.defaults["0.2"];
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this.options[key] = value;
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) continue;
        value = opts[key];
        this.options[key] = value;
      }
    }

    Builder.prototype.buildObject = function(rootObj) {
      var attrkey, charkey, render, rootElement, rootName;
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === exports.defaults['0.2'].rootName)) {
        rootName = Object.keys(rootObj)[0];
        rootObj = rootObj[rootName];
      } else {
        rootName = this.options.rootName;
      }
      render = (function(_this) {
        return function(element, obj) {
          var attr, child, entry, index, key, value;
          if (typeof obj !== 'object') {
            if (_this.options.cdata && requiresCDATA(obj)) {
              element.raw(wrapCDATA(obj));
            } else {
              element.txt(obj);
            }
          } else {
            for (key in obj) {
              if (!hasProp.call(obj, key)) continue;
              child = obj[key];
              if (key === attrkey) {
                if (typeof child === "object") {
                  for (attr in child) {
                    value = child[attr];
                    element = element.att(attr, value);
                  }
                }
              } else if (key === charkey) {
                if (_this.options.cdata && requiresCDATA(child)) {
                  element = element.raw(wrapCDATA(child));
                } else {
                  element = element.txt(child);
                }
              } else if (Array.isArray(child)) {
                for (index in child) {
                  if (!hasProp.call(child, index)) continue;
                  entry = child[index];
                  if (typeof entry === 'string') {
                    if (_this.options.cdata && requiresCDATA(entry)) {
                      element = element.ele(key).raw(wrapCDATA(entry)).up();
                    } else {
                      element = element.ele(key, entry).up();
                    }
                  } else {
                    element = render(element.ele(key), entry).up();
                  }
                }
              } else if (typeof child === "object") {
                element = render(element.ele(key), child).up();
              } else {
                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
                  element = element.ele(key).raw(wrapCDATA(child)).up();
                } else {
                  if (child == null) {
                    child = '';
                  }
                  element = element.ele(key, child.toString()).up();
                }
              }
            }
          }
          return element;
        };
      })(this);
      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
        headless: this.options.headless,
        allowSurrogateChars: this.options.allowSurrogateChars
      });
      return render(rootElement, rootObj).end(this.options.renderOpts);
    };

    return Builder;

  })();

  exports.Parser = (function(superClass) {
    extend(Parser, superClass);

    function Parser(opts) {
      this.parseString = bind(this.parseString, this);
      this.reset = bind(this.reset, this);
      this.assignOrPush = bind(this.assignOrPush, this);
      this.processAsync = bind(this.processAsync, this);
      var key, ref, value;
      if (!(this instanceof exports.Parser)) {
        return new exports.Parser(opts);
      }
      this.options = {};
      ref = exports.defaults["0.2"];
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this.options[key] = value;
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) continue;
        value = opts[key];
        this.options[key] = value;
      }
      if (this.options.xmlns) {
        this.options.xmlnskey = this.options.attrkey + "ns";
      }
      if (this.options.normalizeTags) {
        if (!this.options.tagNameProcessors) {
          this.options.tagNameProcessors = [];
        }
        this.options.tagNameProcessors.unshift(processors.normalize);
      }
      this.reset();
    }

    Parser.prototype.processAsync = function() {
      var chunk, err, error1;
      try {
        if (this.remaining.length <= this.options.chunkSize) {
          chunk = this.remaining;
          this.remaining = '';
          this.saxParser = this.saxParser.write(chunk);
          return this.saxParser.close();
        } else {
          chunk = this.remaining.substr(0, this.options.chunkSize);
          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
          this.saxParser = this.saxParser.write(chunk);
          return setImmediate(this.processAsync);
        }
      } catch (error1) {
        err = error1;
        if (!this.saxParser.errThrown) {
          this.saxParser.errThrown = true;
          return this.emit(err);
        }
      }
    };

    Parser.prototype.assignOrPush = function(obj, key, newValue) {
      if (!(key in obj)) {
        if (!this.options.explicitArray) {
          return obj[key] = newValue;
        } else {
          return obj[key] = [newValue];
        }
      } else {
        if (!(obj[key] instanceof Array)) {
          obj[key] = [obj[key]];
        }
        return obj[key].push(newValue);
      }
    };

    Parser.prototype.reset = function() {
      var attrkey, charkey, ontext, stack;
      this.removeAllListeners();
      this.saxParser = sax.parser(this.options.strict, {
        trim: false,
        normalize: false,
        xmlns: this.options.xmlns
      });
      this.saxParser.errThrown = false;
      this.saxParser.onerror = (function(_this) {
        return function(error) {
          _this.saxParser.resume();
          if (!_this.saxParser.errThrown) {
            _this.saxParser.errThrown = true;
            return _this.emit("error", error);
          }
        };
      })(this);
      this.saxParser.onend = (function(_this) {
        return function() {
          if (!_this.saxParser.ended) {
            _this.saxParser.ended = true;
            return _this.emit("end", _this.resultObject);
          }
        };
      })(this);
      this.saxParser.ended = false;
      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
      this.resultObject = null;
      stack = [];
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      this.saxParser.onopentag = (function(_this) {
        return function(node) {
          var key, newValue, obj, processedKey, ref;
          obj = {};
          obj[charkey] = "";
          if (!_this.options.ignoreAttrs) {
            ref = node.attributes;
            for (key in ref) {
              if (!hasProp.call(ref, key)) continue;
              if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                obj[attrkey] = {};
              }
              newValue = _this.options.attrValueProcessors ? processName(_this.options.attrValueProcessors, node.attributes[key]) : node.attributes[key];
              processedKey = _this.options.attrNameProcessors ? processName(_this.options.attrNameProcessors, key) : key;
              if (_this.options.mergeAttrs) {
                _this.assignOrPush(obj, processedKey, newValue);
              } else {
                obj[attrkey][processedKey] = newValue;
              }
            }
          }
          obj["#name"] = _this.options.tagNameProcessors ? processName(_this.options.tagNameProcessors, node.name) : node.name;
          if (_this.options.xmlns) {
            obj[_this.options.xmlnskey] = {
              uri: node.uri,
              local: node.local
            };
          }
          return stack.push(obj);
        };
      })(this);
      this.saxParser.onclosetag = (function(_this) {
        return function() {
          var cdata, emptyStr, err, error1, key, node, nodeName, obj, objClone, old, s, xpath;
          obj = stack.pop();
          nodeName = obj["#name"];
          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
            delete obj["#name"];
          }
          if (obj.cdata === true) {
            cdata = obj.cdata;
            delete obj.cdata;
          }
          s = stack[stack.length - 1];
          if (obj[charkey].match(/^\s*$/) && !cdata) {
            emptyStr = obj[charkey];
            delete obj[charkey];
          } else {
            if (_this.options.trim) {
              obj[charkey] = obj[charkey].trim();
            }
            if (_this.options.normalize) {
              obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
            }
            obj[charkey] = _this.options.valueProcessors ? processName(_this.options.valueProcessors, obj[charkey]) : obj[charkey];
            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
              obj = obj[charkey];
            }
          }
          if (isEmpty(obj)) {
            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
          }
          if (_this.options.validator != null) {
            xpath = "/" + ((function() {
              var i, len, results;
              results = [];
              for (i = 0, len = stack.length; i < len; i++) {
                node = stack[i];
                results.push(node["#name"]);
              }
              return results;
            })()).concat(nodeName).join("/");
            try {
              obj = _this.options.validator(xpath, s && s[nodeName], obj);
            } catch (error1) {
              err = error1;
              _this.emit("error", err);
            }
          }
          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
            if (!_this.options.preserveChildrenOrder) {
              node = {};
              if (_this.options.attrkey in obj) {
                node[_this.options.attrkey] = obj[_this.options.attrkey];
                delete obj[_this.options.attrkey];
              }
              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                node[_this.options.charkey] = obj[_this.options.charkey];
                delete obj[_this.options.charkey];
              }
              if (Object.getOwnPropertyNames(obj).length > 0) {
                node[_this.options.childkey] = obj;
              }
              obj = node;
            } else if (s) {
              s[_this.options.childkey] = s[_this.options.childkey] || [];
              objClone = {};
              for (key in obj) {
                if (!hasProp.call(obj, key)) continue;
                objClone[key] = obj[key];
              }
              s[_this.options.childkey].push(objClone);
              delete obj["#name"];
              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                obj = obj[charkey];
              }
            }
          }
          if (stack.length > 0) {
            return _this.assignOrPush(s, nodeName, obj);
          } else {
            if (_this.options.explicitRoot) {
              old = obj;
              obj = {};
              obj[nodeName] = old;
            }
            _this.resultObject = obj;
            _this.saxParser.ended = true;
            return _this.emit("end", _this.resultObject);
          }
        };
      })(this);
      ontext = (function(_this) {
        return function(text) {
          var charChild, s;
          s = stack[stack.length - 1];
          if (s) {
            s[charkey] += text;
            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && text.replace(/\\n/g, '').trim() !== '') {
              s[_this.options.childkey] = s[_this.options.childkey] || [];
              charChild = {
                '#name': '__text__'
              };
              charChild[charkey] = text;
              s[_this.options.childkey].push(charChild);
            }
            return s;
          }
        };
      })(this);
      this.saxParser.ontext = ontext;
      return this.saxParser.oncdata = (function(_this) {
        return function(text) {
          var s;
          s = ontext(text);
          if (s) {
            return s.cdata = true;
          }
        };
      })(this);
    };

    Parser.prototype.parseString = function(str, cb) {
      var err, error1;
      if ((cb != null) && typeof cb === "function") {
        this.on("end", function(result) {
          this.reset();
          return cb(null, result);
        });
        this.on("error", function(err) {
          this.reset();
          return cb(err);
        });
      }
      try {
        str = str.toString();
        if (str.trim() === '') {
          this.emit("end", null);
          return true;
        }
        str = bom.stripBOM(str);
        if (this.options.async) {
          this.remaining = str;
          setImmediate(this.processAsync);
          return this.saxParser;
        }
        return this.saxParser.write(str).close();
      } catch (error1) {
        err = error1;
        if (!(this.saxParser.errThrown || this.saxParser.ended)) {
          this.emit('error', err);
          return this.saxParser.errThrown = true;
        } else if (this.saxParser.ended) {
          throw err;
        }
      }
    };

    return Parser;

  })(events.EventEmitter);

  exports.parseString = function(str, a, b) {
    var cb, options, parser;
    if (b != null) {
      if (typeof b === 'function') {
        cb = b;
      }
      if (typeof a === 'object') {
        options = a;
      }
    } else {
      if (typeof a === 'function') {
        cb = a;
      }
      options = {};
    }
    parser = new exports.Parser(options);
    return parser.parseString(str, cb);
  };

}).call(this);

},{"./bom":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\lib\\bom.js","./processors":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\lib\\processors.js","events":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\events\\events.js","sax":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\sax\\lib\\sax.js","timers":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\timers-browserify\\main.js","xmlbuilder":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\index.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\sax\\lib\\sax.js":[function(require,module,exports){
(function (Buffer){
;(function (sax) { // wrapper for non-node envs
  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
  sax.SAXParser = SAXParser
  sax.SAXStream = SAXStream
  sax.createStream = createStream

  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
  // since that's the earliest that a buffer overrun could occur.  This way, checks are
  // as rare as required, but as often as necessary to ensure never crossing this bound.
  // Furthermore, buffers are only tested at most once per write(), so passing a very
  // large string into write() might have undesirable effects, but this is manageable by
  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
  // edge case, result in creating at most one complete copy of the string passed in.
  // Set to Infinity to have unlimited buffers.
  sax.MAX_BUFFER_LENGTH = 64 * 1024

  var buffers = [
    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
    'procInstName', 'procInstBody', 'entity', 'attribName',
    'attribValue', 'cdata', 'script'
  ]

  sax.EVENTS = [
    'text',
    'processinginstruction',
    'sgmldeclaration',
    'doctype',
    'comment',
    'opentagstart',
    'attribute',
    'opentag',
    'closetag',
    'opencdata',
    'cdata',
    'closecdata',
    'error',
    'end',
    'ready',
    'script',
    'opennamespace',
    'closenamespace'
  ]

  function SAXParser (strict, opt) {
    if (!(this instanceof SAXParser)) {
      return new SAXParser(strict, opt)
    }

    var parser = this
    clearBuffers(parser)
    parser.q = parser.c = ''
    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
    parser.opt = opt || {}
    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'
    parser.tags = []
    parser.closed = parser.closedRoot = parser.sawRoot = false
    parser.tag = parser.error = null
    parser.strict = !!strict
    parser.noscript = !!(strict || parser.opt.noscript)
    parser.state = S.BEGIN
    parser.strictEntities = parser.opt.strictEntities
    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)
    parser.attribList = []

    // namespaces form a prototype chain.
    // it always points at the current tag,
    // which protos to its parent tag.
    if (parser.opt.xmlns) {
      parser.ns = Object.create(rootNS)
    }

    // mostly just for error reporting
    parser.trackPosition = parser.opt.position !== false
    if (parser.trackPosition) {
      parser.position = parser.line = parser.column = 0
    }
    emit(parser, 'onready')
  }

  if (!Object.create) {
    Object.create = function (o) {
      function F () {}
      F.prototype = o
      var newf = new F()
      return newf
    }
  }

  if (!Object.keys) {
    Object.keys = function (o) {
      var a = []
      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
      return a
    }
  }

  function checkBufferLength (parser) {
    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
    var maxActual = 0
    for (var i = 0, l = buffers.length; i < l; i++) {
      var len = parser[buffers[i]].length
      if (len > maxAllowed) {
        // Text/cdata nodes can get big, and since they're buffered,
        // we can get here under normal conditions.
        // Avoid issues by emitting the text node now,
        // so at least it won't get any bigger.
        switch (buffers[i]) {
          case 'textNode':
            closeText(parser)
            break

          case 'cdata':
            emitNode(parser, 'oncdata', parser.cdata)
            parser.cdata = ''
            break

          case 'script':
            emitNode(parser, 'onscript', parser.script)
            parser.script = ''
            break

          default:
            error(parser, 'Max buffer length exceeded: ' + buffers[i])
        }
      }
      maxActual = Math.max(maxActual, len)
    }
    // schedule the next check for the earliest possible buffer overrun.
    var m = sax.MAX_BUFFER_LENGTH - maxActual
    parser.bufferCheckPosition = m + parser.position
  }

  function clearBuffers (parser) {
    for (var i = 0, l = buffers.length; i < l; i++) {
      parser[buffers[i]] = ''
    }
  }

  function flushBuffers (parser) {
    closeText(parser)
    if (parser.cdata !== '') {
      emitNode(parser, 'oncdata', parser.cdata)
      parser.cdata = ''
    }
    if (parser.script !== '') {
      emitNode(parser, 'onscript', parser.script)
      parser.script = ''
    }
  }

  SAXParser.prototype = {
    end: function () { end(this) },
    write: write,
    resume: function () { this.error = null; return this },
    close: function () { return this.write(null) },
    flush: function () { flushBuffers(this) }
  }

  var Stream
  try {
    Stream = require('stream').Stream
  } catch (ex) {
    Stream = function () {}
  }

  var streamWraps = sax.EVENTS.filter(function (ev) {
    return ev !== 'error' && ev !== 'end'
  })

  function createStream (strict, opt) {
    return new SAXStream(strict, opt)
  }

  function SAXStream (strict, opt) {
    if (!(this instanceof SAXStream)) {
      return new SAXStream(strict, opt)
    }

    Stream.apply(this)

    this._parser = new SAXParser(strict, opt)
    this.writable = true
    this.readable = true

    var me = this

    this._parser.onend = function () {
      me.emit('end')
    }

    this._parser.onerror = function (er) {
      me.emit('error', er)

      // if didn't throw, then means error was handled.
      // go ahead and clear error, so we can write again.
      me._parser.error = null
    }

    this._decoder = null

    streamWraps.forEach(function (ev) {
      Object.defineProperty(me, 'on' + ev, {
        get: function () {
          return me._parser['on' + ev]
        },
        set: function (h) {
          if (!h) {
            me.removeAllListeners(ev)
            me._parser['on' + ev] = h
            return h
          }
          me.on(ev, h)
        },
        enumerable: true,
        configurable: false
      })
    })
  }

  SAXStream.prototype = Object.create(Stream.prototype, {
    constructor: {
      value: SAXStream
    }
  })

  SAXStream.prototype.write = function (data) {
    if (typeof Buffer === 'function' &&
      typeof Buffer.isBuffer === 'function' &&
      Buffer.isBuffer(data)) {
      if (!this._decoder) {
        var SD = require('string_decoder').StringDecoder
        this._decoder = new SD('utf8')
      }
      data = this._decoder.write(data)
    }

    this._parser.write(data.toString())
    this.emit('data', data)
    return true
  }

  SAXStream.prototype.end = function (chunk) {
    if (chunk && chunk.length) {
      this.write(chunk)
    }
    this._parser.end()
    return true
  }

  SAXStream.prototype.on = function (ev, handler) {
    var me = this
    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
      me._parser['on' + ev] = function () {
        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)
        args.splice(0, 0, ev)
        me.emit.apply(me, args)
      }
    }

    return Stream.prototype.on.call(me, ev, handler)
  }

  // character classes and tokens
  var whitespace = '\r\n\t '

  // this really needs to be replaced with character classes.
  // XML allows all manner of ridiculous numbers and digits.
  var number = '0124356789'
  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

  // (Letter | "_" | ":")
  var quote = '\'"'
  var attribEnd = whitespace + '>'
  var CDATA = '[CDATA['
  var DOCTYPE = 'DOCTYPE'
  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'
  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'
  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

  // turn all the string character sets into character class objects.
  whitespace = charClass(whitespace)
  number = charClass(number)
  letter = charClass(letter)

  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
  // This implementation works on strings, a single character at a time
  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
  // without a significant breaking change to either this  parser, or the
  // JavaScript language.  Implementation of an emoji-capable xml parser
  // is left as an exercise for the reader.
  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/
  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

  quote = charClass(quote)
  attribEnd = charClass(attribEnd)

  function charClass (str) {
    return str.split('').reduce(function (s, c) {
      s[c] = true
      return s
    }, {})
  }

  function isRegExp (c) {
    return Object.prototype.toString.call(c) === '[object RegExp]'
  }

  function is (charclass, c) {
    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
  }

  function not (charclass, c) {
    return !is(charclass, c)
  }

  var S = 0
  sax.STATE = {
    BEGIN: S++, // leading byte order mark or whitespace
    BEGIN_WHITESPACE: S++, // leading whitespace
    TEXT: S++, // general stuff
    TEXT_ENTITY: S++, // &amp and such.
    OPEN_WAKA: S++, // <
    SGML_DECL: S++, // <!BLARG
    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
    DOCTYPE: S++, // <!DOCTYPE
    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
    COMMENT_STARTING: S++, // <!-
    COMMENT: S++, // <!--
    COMMENT_ENDING: S++, // <!-- blah -
    COMMENT_ENDED: S++, // <!-- blah --
    CDATA: S++, // <![CDATA[ something
    CDATA_ENDING: S++, // ]
    CDATA_ENDING_2: S++, // ]]
    PROC_INST: S++, // <?hi
    PROC_INST_BODY: S++, // <?hi there
    PROC_INST_ENDING: S++, // <?hi "there" ?
    OPEN_TAG: S++, // <strong
    OPEN_TAG_SLASH: S++, // <strong /
    ATTRIB: S++, // <a
    ATTRIB_NAME: S++, // <a foo
    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
    ATTRIB_VALUE: S++, // <a foo=
    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
    CLOSE_TAG: S++, // </a
    CLOSE_TAG_SAW_WHITE: S++, // </a   >
    SCRIPT: S++, // <script> ...
    SCRIPT_ENDING: S++ // <script> ... <
  }

  sax.XML_ENTITIES = {
    'amp': '&',
    'gt': '>',
    'lt': '<',
    'quot': '"',
    'apos': "'"
  }

  sax.ENTITIES = {
    'amp': '&',
    'gt': '>',
    'lt': '<',
    'quot': '"',
    'apos': "'",
    'AElig': 198,
    'Aacute': 193,
    'Acirc': 194,
    'Agrave': 192,
    'Aring': 197,
    'Atilde': 195,
    'Auml': 196,
    'Ccedil': 199,
    'ETH': 208,
    'Eacute': 201,
    'Ecirc': 202,
    'Egrave': 200,
    'Euml': 203,
    'Iacute': 205,
    'Icirc': 206,
    'Igrave': 204,
    'Iuml': 207,
    'Ntilde': 209,
    'Oacute': 211,
    'Ocirc': 212,
    'Ograve': 210,
    'Oslash': 216,
    'Otilde': 213,
    'Ouml': 214,
    'THORN': 222,
    'Uacute': 218,
    'Ucirc': 219,
    'Ugrave': 217,
    'Uuml': 220,
    'Yacute': 221,
    'aacute': 225,
    'acirc': 226,
    'aelig': 230,
    'agrave': 224,
    'aring': 229,
    'atilde': 227,
    'auml': 228,
    'ccedil': 231,
    'eacute': 233,
    'ecirc': 234,
    'egrave': 232,
    'eth': 240,
    'euml': 235,
    'iacute': 237,
    'icirc': 238,
    'igrave': 236,
    'iuml': 239,
    'ntilde': 241,
    'oacute': 243,
    'ocirc': 244,
    'ograve': 242,
    'oslash': 248,
    'otilde': 245,
    'ouml': 246,
    'szlig': 223,
    'thorn': 254,
    'uacute': 250,
    'ucirc': 251,
    'ugrave': 249,
    'uuml': 252,
    'yacute': 253,
    'yuml': 255,
    'copy': 169,
    'reg': 174,
    'nbsp': 160,
    'iexcl': 161,
    'cent': 162,
    'pound': 163,
    'curren': 164,
    'yen': 165,
    'brvbar': 166,
    'sect': 167,
    'uml': 168,
    'ordf': 170,
    'laquo': 171,
    'not': 172,
    'shy': 173,
    'macr': 175,
    'deg': 176,
    'plusmn': 177,
    'sup1': 185,
    'sup2': 178,
    'sup3': 179,
    'acute': 180,
    'micro': 181,
    'para': 182,
    'middot': 183,
    'cedil': 184,
    'ordm': 186,
    'raquo': 187,
    'frac14': 188,
    'frac12': 189,
    'frac34': 190,
    'iquest': 191,
    'times': 215,
    'divide': 247,
    'OElig': 338,
    'oelig': 339,
    'Scaron': 352,
    'scaron': 353,
    'Yuml': 376,
    'fnof': 402,
    'circ': 710,
    'tilde': 732,
    'Alpha': 913,
    'Beta': 914,
    'Gamma': 915,
    'Delta': 916,
    'Epsilon': 917,
    'Zeta': 918,
    'Eta': 919,
    'Theta': 920,
    'Iota': 921,
    'Kappa': 922,
    'Lambda': 923,
    'Mu': 924,
    'Nu': 925,
    'Xi': 926,
    'Omicron': 927,
    'Pi': 928,
    'Rho': 929,
    'Sigma': 931,
    'Tau': 932,
    'Upsilon': 933,
    'Phi': 934,
    'Chi': 935,
    'Psi': 936,
    'Omega': 937,
    'alpha': 945,
    'beta': 946,
    'gamma': 947,
    'delta': 948,
    'epsilon': 949,
    'zeta': 950,
    'eta': 951,
    'theta': 952,
    'iota': 953,
    'kappa': 954,
    'lambda': 955,
    'mu': 956,
    'nu': 957,
    'xi': 958,
    'omicron': 959,
    'pi': 960,
    'rho': 961,
    'sigmaf': 962,
    'sigma': 963,
    'tau': 964,
    'upsilon': 965,
    'phi': 966,
    'chi': 967,
    'psi': 968,
    'omega': 969,
    'thetasym': 977,
    'upsih': 978,
    'piv': 982,
    'ensp': 8194,
    'emsp': 8195,
    'thinsp': 8201,
    'zwnj': 8204,
    'zwj': 8205,
    'lrm': 8206,
    'rlm': 8207,
    'ndash': 8211,
    'mdash': 8212,
    'lsquo': 8216,
    'rsquo': 8217,
    'sbquo': 8218,
    'ldquo': 8220,
    'rdquo': 8221,
    'bdquo': 8222,
    'dagger': 8224,
    'Dagger': 8225,
    'bull': 8226,
    'hellip': 8230,
    'permil': 8240,
    'prime': 8242,
    'Prime': 8243,
    'lsaquo': 8249,
    'rsaquo': 8250,
    'oline': 8254,
    'frasl': 8260,
    'euro': 8364,
    'image': 8465,
    'weierp': 8472,
    'real': 8476,
    'trade': 8482,
    'alefsym': 8501,
    'larr': 8592,
    'uarr': 8593,
    'rarr': 8594,
    'darr': 8595,
    'harr': 8596,
    'crarr': 8629,
    'lArr': 8656,
    'uArr': 8657,
    'rArr': 8658,
    'dArr': 8659,
    'hArr': 8660,
    'forall': 8704,
    'part': 8706,
    'exist': 8707,
    'empty': 8709,
    'nabla': 8711,
    'isin': 8712,
    'notin': 8713,
    'ni': 8715,
    'prod': 8719,
    'sum': 8721,
    'minus': 8722,
    'lowast': 8727,
    'radic': 8730,
    'prop': 8733,
    'infin': 8734,
    'ang': 8736,
    'and': 8743,
    'or': 8744,
    'cap': 8745,
    'cup': 8746,
    'int': 8747,
    'there4': 8756,
    'sim': 8764,
    'cong': 8773,
    'asymp': 8776,
    'ne': 8800,
    'equiv': 8801,
    'le': 8804,
    'ge': 8805,
    'sub': 8834,
    'sup': 8835,
    'nsub': 8836,
    'sube': 8838,
    'supe': 8839,
    'oplus': 8853,
    'otimes': 8855,
    'perp': 8869,
    'sdot': 8901,
    'lceil': 8968,
    'rceil': 8969,
    'lfloor': 8970,
    'rfloor': 8971,
    'lang': 9001,
    'rang': 9002,
    'loz': 9674,
    'spades': 9824,
    'clubs': 9827,
    'hearts': 9829,
    'diams': 9830
  }

  Object.keys(sax.ENTITIES).forEach(function (key) {
    var e = sax.ENTITIES[key]
    var s = typeof e === 'number' ? String.fromCharCode(e) : e
    sax.ENTITIES[key] = s
  })

  for (var s in sax.STATE) {
    sax.STATE[sax.STATE[s]] = s
  }

  // shorthand
  S = sax.STATE

  function emit (parser, event, data) {
    parser[event] && parser[event](data)
  }

  function emitNode (parser, nodeType, data) {
    if (parser.textNode) closeText(parser)
    emit(parser, nodeType, data)
  }

  function closeText (parser) {
    parser.textNode = textopts(parser.opt, parser.textNode)
    if (parser.textNode) emit(parser, 'ontext', parser.textNode)
    parser.textNode = ''
  }

  function textopts (opt, text) {
    if (opt.trim) text = text.trim()
    if (opt.normalize) text = text.replace(/\s+/g, ' ')
    return text
  }

  function error (parser, er) {
    closeText(parser)
    if (parser.trackPosition) {
      er += '\nLine: ' + parser.line +
        '\nColumn: ' + parser.column +
        '\nChar: ' + parser.c
    }
    er = new Error(er)
    parser.error = er
    emit(parser, 'onerror', er)
    return parser
  }

  function end (parser) {
    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')
    if ((parser.state !== S.BEGIN) &&
      (parser.state !== S.BEGIN_WHITESPACE) &&
      (parser.state !== S.TEXT)) {
      error(parser, 'Unexpected end')
    }
    closeText(parser)
    parser.c = ''
    parser.closed = true
    emit(parser, 'onend')
    SAXParser.call(parser, parser.strict, parser.opt)
    return parser
  }

  function strictFail (parser, message) {
    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
      throw new Error('bad call to strictFail')
    }
    if (parser.strict) {
      error(parser, message)
    }
  }

  function newTag (parser) {
    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
    var parent = parser.tags[parser.tags.length - 1] || parser
    var tag = parser.tag = { name: parser.tagName, attributes: {} }

    // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
    if (parser.opt.xmlns) {
      tag.ns = parent.ns
    }
    parser.attribList.length = 0
    emitNode(parser, 'onopentagstart', tag)
  }

  function qname (name, attribute) {
    var i = name.indexOf(':')
    var qualName = i < 0 ? [ '', name ] : name.split(':')
    var prefix = qualName[0]
    var local = qualName[1]

    // <x "xmlns"="http://foo">
    if (attribute && name === 'xmlns') {
      prefix = 'xmlns'
      local = ''
    }

    return { prefix: prefix, local: local }
  }

  function attrib (parser) {
    if (!parser.strict) {
      parser.attribName = parser.attribName[parser.looseCase]()
    }

    if (parser.attribList.indexOf(parser.attribName) !== -1 ||
      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
      parser.attribName = parser.attribValue = ''
      return
    }

    if (parser.opt.xmlns) {
      var qn = qname(parser.attribName, true)
      var prefix = qn.prefix
      var local = qn.local

      if (prefix === 'xmlns') {
        // namespace binding attribute. push the binding into scope
        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
          strictFail(parser,
            'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
            'Actual: ' + parser.attribValue)
        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
          strictFail(parser,
            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
            'Actual: ' + parser.attribValue)
        } else {
          var tag = parser.tag
          var parent = parser.tags[parser.tags.length - 1] || parser
          if (tag.ns === parent.ns) {
            tag.ns = Object.create(parent.ns)
          }
          tag.ns[local] = parser.attribValue
        }
      }

      // defer onattribute events until all attributes have been seen
      // so any new bindings can take effect. preserve attribute order
      // so deferred events can be emitted in document order
      parser.attribList.push([parser.attribName, parser.attribValue])
    } else {
      // in non-xmlns mode, we can emit the event right away
      parser.tag.attributes[parser.attribName] = parser.attribValue
      emitNode(parser, 'onattribute', {
        name: parser.attribName,
        value: parser.attribValue
      })
    }

    parser.attribName = parser.attribValue = ''
  }

  function openTag (parser, selfClosing) {
    if (parser.opt.xmlns) {
      // emit namespace binding events
      var tag = parser.tag

      // add namespace info to tag
      var qn = qname(parser.tagName)
      tag.prefix = qn.prefix
      tag.local = qn.local
      tag.uri = tag.ns[qn.prefix] || ''

      if (tag.prefix && !tag.uri) {
        strictFail(parser, 'Unbound namespace prefix: ' +
          JSON.stringify(parser.tagName))
        tag.uri = qn.prefix
      }

      var parent = parser.tags[parser.tags.length - 1] || parser
      if (tag.ns && parent.ns !== tag.ns) {
        Object.keys(tag.ns).forEach(function (p) {
          emitNode(parser, 'onopennamespace', {
            prefix: p,
            uri: tag.ns[p]
          })
        })
      }

      // handle deferred onattribute events
      // Note: do not apply default ns to attributes:
      //   http://www.w3.org/TR/REC-xml-names/#defaulting
      for (var i = 0, l = parser.attribList.length; i < l; i++) {
        var nv = parser.attribList[i]
        var name = nv[0]
        var value = nv[1]
        var qualName = qname(name, true)
        var prefix = qualName.prefix
        var local = qualName.local
        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')
        var a = {
          name: name,
          value: value,
          prefix: prefix,
          local: local,
          uri: uri
        }

        // if there's any attributes with an undefined namespace,
        // then fail on them now.
        if (prefix && prefix !== 'xmlns' && !uri) {
          strictFail(parser, 'Unbound namespace prefix: ' +
            JSON.stringify(prefix))
          a.uri = prefix
        }
        parser.tag.attributes[name] = a
        emitNode(parser, 'onattribute', a)
      }
      parser.attribList.length = 0
    }

    parser.tag.isSelfClosing = !!selfClosing

    // process the tag
    parser.sawRoot = true
    parser.tags.push(parser.tag)
    emitNode(parser, 'onopentag', parser.tag)
    if (!selfClosing) {
      // special case for <script> in non-strict mode.
      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
        parser.state = S.SCRIPT
      } else {
        parser.state = S.TEXT
      }
      parser.tag = null
      parser.tagName = ''
    }
    parser.attribName = parser.attribValue = ''
    parser.attribList.length = 0
  }

  function closeTag (parser) {
    if (!parser.tagName) {
      strictFail(parser, 'Weird empty close tag.')
      parser.textNode += '</>'
      parser.state = S.TEXT
      return
    }

    if (parser.script) {
      if (parser.tagName !== 'script') {
        parser.script += '</' + parser.tagName + '>'
        parser.tagName = ''
        parser.state = S.SCRIPT
        return
      }
      emitNode(parser, 'onscript', parser.script)
      parser.script = ''
    }

    // first make sure that the closing tag actually exists.
    // <a><b></c></b></a> will close everything, otherwise.
    var t = parser.tags.length
    var tagName = parser.tagName
    if (!parser.strict) {
      tagName = tagName[parser.looseCase]()
    }
    var closeTo = tagName
    while (t--) {
      var close = parser.tags[t]
      if (close.name !== closeTo) {
        // fail the first time in strict mode
        strictFail(parser, 'Unexpected close tag')
      } else {
        break
      }
    }

    // didn't find it.  we already failed for strict, so just abort.
    if (t < 0) {
      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)
      parser.textNode += '</' + parser.tagName + '>'
      parser.state = S.TEXT
      return
    }
    parser.tagName = tagName
    var s = parser.tags.length
    while (s-- > t) {
      var tag = parser.tag = parser.tags.pop()
      parser.tagName = parser.tag.name
      emitNode(parser, 'onclosetag', parser.tagName)

      var x = {}
      for (var i in tag.ns) {
        x[i] = tag.ns[i]
      }

      var parent = parser.tags[parser.tags.length - 1] || parser
      if (parser.opt.xmlns && tag.ns !== parent.ns) {
        // remove namespace bindings introduced by tag
        Object.keys(tag.ns).forEach(function (p) {
          var n = tag.ns[p]
          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })
        })
      }
    }
    if (t === 0) parser.closedRoot = true
    parser.tagName = parser.attribValue = parser.attribName = ''
    parser.attribList.length = 0
    parser.state = S.TEXT
  }

  function parseEntity (parser) {
    var entity = parser.entity
    var entityLC = entity.toLowerCase()
    var num
    var numStr = ''

    if (parser.ENTITIES[entity]) {
      return parser.ENTITIES[entity]
    }
    if (parser.ENTITIES[entityLC]) {
      return parser.ENTITIES[entityLC]
    }
    entity = entityLC
    if (entity.charAt(0) === '#') {
      if (entity.charAt(1) === 'x') {
        entity = entity.slice(2)
        num = parseInt(entity, 16)
        numStr = num.toString(16)
      } else {
        entity = entity.slice(1)
        num = parseInt(entity, 10)
        numStr = num.toString(10)
      }
    }
    entity = entity.replace(/^0+/, '')
    if (numStr.toLowerCase() !== entity) {
      strictFail(parser, 'Invalid character entity')
      return '&' + parser.entity + ';'
    }

    return String.fromCodePoint(num)
  }

  function beginWhiteSpace (parser, c) {
    if (c === '<') {
      parser.state = S.OPEN_WAKA
      parser.startTagPosition = parser.position
    } else if (not(whitespace, c)) {
      // have to process this as a text node.
      // weird, but happens.
      strictFail(parser, 'Non-whitespace before first tag.')
      parser.textNode = c
      parser.state = S.TEXT
    }
  }

  function charAt (chunk, i) {
    var result = ''
    if (i < chunk.length) {
      result = chunk.charAt(i)
    }
    return result
  }

  function write (chunk) {
    var parser = this
    if (this.error) {
      throw this.error
    }
    if (parser.closed) {
      return error(parser,
        'Cannot write after close. Assign an onready handler.')
    }
    if (chunk === null) {
      return end(parser)
    }
    if (typeof chunk === 'object') {
      chunk = chunk.toString()
    }
    var i = 0
    var c = ''
    while (true) {
      c = charAt(chunk, i++)
      parser.c = c
      if (!c) {
        break
      }
      if (parser.trackPosition) {
        parser.position++
        if (c === '\n') {
          parser.line++
          parser.column = 0
        } else {
          parser.column++
        }
      }
      switch (parser.state) {
        case S.BEGIN:
          parser.state = S.BEGIN_WHITESPACE
          if (c === '\uFEFF') {
            continue
          }
          beginWhiteSpace(parser, c)
          continue

        case S.BEGIN_WHITESPACE:
          beginWhiteSpace(parser, c)
          continue

        case S.TEXT:
          if (parser.sawRoot && !parser.closedRoot) {
            var starti = i - 1
            while (c && c !== '<' && c !== '&') {
              c = charAt(chunk, i++)
              if (c && parser.trackPosition) {
                parser.position++
                if (c === '\n') {
                  parser.line++
                  parser.column = 0
                } else {
                  parser.column++
                }
              }
            }
            parser.textNode += chunk.substring(starti, i - 1)
          }
          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
            parser.state = S.OPEN_WAKA
            parser.startTagPosition = parser.position
          } else {
            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {
              strictFail(parser, 'Text data outside of root node.')
            }
            if (c === '&') {
              parser.state = S.TEXT_ENTITY
            } else {
              parser.textNode += c
            }
          }
          continue

        case S.SCRIPT:
          // only non-strict
          if (c === '<') {
            parser.state = S.SCRIPT_ENDING
          } else {
            parser.script += c
          }
          continue

        case S.SCRIPT_ENDING:
          if (c === '/') {
            parser.state = S.CLOSE_TAG
          } else {
            parser.script += '<' + c
            parser.state = S.SCRIPT
          }
          continue

        case S.OPEN_WAKA:
          // either a /, ?, !, or text is coming next.
          if (c === '!') {
            parser.state = S.SGML_DECL
            parser.sgmlDecl = ''
          } else if (is(whitespace, c)) {
            // wait for it...
          } else if (is(nameStart, c)) {
            parser.state = S.OPEN_TAG
            parser.tagName = c
          } else if (c === '/') {
            parser.state = S.CLOSE_TAG
            parser.tagName = ''
          } else if (c === '?') {
            parser.state = S.PROC_INST
            parser.procInstName = parser.procInstBody = ''
          } else {
            strictFail(parser, 'Unencoded <')
            // if there was some whitespace, then add that in.
            if (parser.startTagPosition + 1 < parser.position) {
              var pad = parser.position - parser.startTagPosition
              c = new Array(pad).join(' ') + c
            }
            parser.textNode += '<' + c
            parser.state = S.TEXT
          }
          continue

        case S.SGML_DECL:
          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
            emitNode(parser, 'onopencdata')
            parser.state = S.CDATA
            parser.sgmlDecl = ''
            parser.cdata = ''
          } else if (parser.sgmlDecl + c === '--') {
            parser.state = S.COMMENT
            parser.comment = ''
            parser.sgmlDecl = ''
          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
            parser.state = S.DOCTYPE
            if (parser.doctype || parser.sawRoot) {
              strictFail(parser,
                'Inappropriately located doctype declaration')
            }
            parser.doctype = ''
            parser.sgmlDecl = ''
          } else if (c === '>') {
            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)
            parser.sgmlDecl = ''
            parser.state = S.TEXT
          } else if (is(quote, c)) {
            parser.state = S.SGML_DECL_QUOTED
            parser.sgmlDecl += c
          } else {
            parser.sgmlDecl += c
          }
          continue

        case S.SGML_DECL_QUOTED:
          if (c === parser.q) {
            parser.state = S.SGML_DECL
            parser.q = ''
          }
          parser.sgmlDecl += c
          continue

        case S.DOCTYPE:
          if (c === '>') {
            parser.state = S.TEXT
            emitNode(parser, 'ondoctype', parser.doctype)
            parser.doctype = true // just remember that we saw it.
          } else {
            parser.doctype += c
            if (c === '[') {
              parser.state = S.DOCTYPE_DTD
            } else if (is(quote, c)) {
              parser.state = S.DOCTYPE_QUOTED
              parser.q = c
            }
          }
          continue

        case S.DOCTYPE_QUOTED:
          parser.doctype += c
          if (c === parser.q) {
            parser.q = ''
            parser.state = S.DOCTYPE
          }
          continue

        case S.DOCTYPE_DTD:
          parser.doctype += c
          if (c === ']') {
            parser.state = S.DOCTYPE
          } else if (is(quote, c)) {
            parser.state = S.DOCTYPE_DTD_QUOTED
            parser.q = c
          }
          continue

        case S.DOCTYPE_DTD_QUOTED:
          parser.doctype += c
          if (c === parser.q) {
            parser.state = S.DOCTYPE_DTD
            parser.q = ''
          }
          continue

        case S.COMMENT:
          if (c === '-') {
            parser.state = S.COMMENT_ENDING
          } else {
            parser.comment += c
          }
          continue

        case S.COMMENT_ENDING:
          if (c === '-') {
            parser.state = S.COMMENT_ENDED
            parser.comment = textopts(parser.opt, parser.comment)
            if (parser.comment) {
              emitNode(parser, 'oncomment', parser.comment)
            }
            parser.comment = ''
          } else {
            parser.comment += '-' + c
            parser.state = S.COMMENT
          }
          continue

        case S.COMMENT_ENDED:
          if (c !== '>') {
            strictFail(parser, 'Malformed comment')
            // allow <!-- blah -- bloo --> in non-strict mode,
            // which is a comment of " blah -- bloo "
            parser.comment += '--' + c
            parser.state = S.COMMENT
          } else {
            parser.state = S.TEXT
          }
          continue

        case S.CDATA:
          if (c === ']') {
            parser.state = S.CDATA_ENDING
          } else {
            parser.cdata += c
          }
          continue

        case S.CDATA_ENDING:
          if (c === ']') {
            parser.state = S.CDATA_ENDING_2
          } else {
            parser.cdata += ']' + c
            parser.state = S.CDATA
          }
          continue

        case S.CDATA_ENDING_2:
          if (c === '>') {
            if (parser.cdata) {
              emitNode(parser, 'oncdata', parser.cdata)
            }
            emitNode(parser, 'onclosecdata')
            parser.cdata = ''
            parser.state = S.TEXT
          } else if (c === ']') {
            parser.cdata += ']'
          } else {
            parser.cdata += ']]' + c
            parser.state = S.CDATA
          }
          continue

        case S.PROC_INST:
          if (c === '?') {
            parser.state = S.PROC_INST_ENDING
          } else if (is(whitespace, c)) {
            parser.state = S.PROC_INST_BODY
          } else {
            parser.procInstName += c
          }
          continue

        case S.PROC_INST_BODY:
          if (!parser.procInstBody && is(whitespace, c)) {
            continue
          } else if (c === '?') {
            parser.state = S.PROC_INST_ENDING
          } else {
            parser.procInstBody += c
          }
          continue

        case S.PROC_INST_ENDING:
          if (c === '>') {
            emitNode(parser, 'onprocessinginstruction', {
              name: parser.procInstName,
              body: parser.procInstBody
            })
            parser.procInstName = parser.procInstBody = ''
            parser.state = S.TEXT
          } else {
            parser.procInstBody += '?' + c
            parser.state = S.PROC_INST_BODY
          }
          continue

        case S.OPEN_TAG:
          if (is(nameBody, c)) {
            parser.tagName += c
          } else {
            newTag(parser)
            if (c === '>') {
              openTag(parser)
            } else if (c === '/') {
              parser.state = S.OPEN_TAG_SLASH
            } else {
              if (not(whitespace, c)) {
                strictFail(parser, 'Invalid character in tag name')
              }
              parser.state = S.ATTRIB
            }
          }
          continue

        case S.OPEN_TAG_SLASH:
          if (c === '>') {
            openTag(parser, true)
            closeTag(parser)
          } else {
            strictFail(parser, 'Forward-slash in opening tag not followed by >')
            parser.state = S.ATTRIB
          }
          continue

        case S.ATTRIB:
          // haven't read the attribute name yet.
          if (is(whitespace, c)) {
            continue
          } else if (c === '>') {
            openTag(parser)
          } else if (c === '/') {
            parser.state = S.OPEN_TAG_SLASH
          } else if (is(nameStart, c)) {
            parser.attribName = c
            parser.attribValue = ''
            parser.state = S.ATTRIB_NAME
          } else {
            strictFail(parser, 'Invalid attribute name')
          }
          continue

        case S.ATTRIB_NAME:
          if (c === '=') {
            parser.state = S.ATTRIB_VALUE
          } else if (c === '>') {
            strictFail(parser, 'Attribute without value')
            parser.attribValue = parser.attribName
            attrib(parser)
            openTag(parser)
          } else if (is(whitespace, c)) {
            parser.state = S.ATTRIB_NAME_SAW_WHITE
          } else if (is(nameBody, c)) {
            parser.attribName += c
          } else {
            strictFail(parser, 'Invalid attribute name')
          }
          continue

        case S.ATTRIB_NAME_SAW_WHITE:
          if (c === '=') {
            parser.state = S.ATTRIB_VALUE
          } else if (is(whitespace, c)) {
            continue
          } else {
            strictFail(parser, 'Attribute without value')
            parser.tag.attributes[parser.attribName] = ''
            parser.attribValue = ''
            emitNode(parser, 'onattribute', {
              name: parser.attribName,
              value: ''
            })
            parser.attribName = ''
            if (c === '>') {
              openTag(parser)
            } else if (is(nameStart, c)) {
              parser.attribName = c
              parser.state = S.ATTRIB_NAME
            } else {
              strictFail(parser, 'Invalid attribute name')
              parser.state = S.ATTRIB
            }
          }
          continue

        case S.ATTRIB_VALUE:
          if (is(whitespace, c)) {
            continue
          } else if (is(quote, c)) {
            parser.q = c
            parser.state = S.ATTRIB_VALUE_QUOTED
          } else {
            strictFail(parser, 'Unquoted attribute value')
            parser.state = S.ATTRIB_VALUE_UNQUOTED
            parser.attribValue = c
          }
          continue

        case S.ATTRIB_VALUE_QUOTED:
          if (c !== parser.q) {
            if (c === '&') {
              parser.state = S.ATTRIB_VALUE_ENTITY_Q
            } else {
              parser.attribValue += c
            }
            continue
          }
          attrib(parser)
          parser.q = ''
          parser.state = S.ATTRIB_VALUE_CLOSED
          continue

        case S.ATTRIB_VALUE_CLOSED:
          if (is(whitespace, c)) {
            parser.state = S.ATTRIB
          } else if (c === '>') {
            openTag(parser)
          } else if (c === '/') {
            parser.state = S.OPEN_TAG_SLASH
          } else if (is(nameStart, c)) {
            strictFail(parser, 'No whitespace between attributes')
            parser.attribName = c
            parser.attribValue = ''
            parser.state = S.ATTRIB_NAME
          } else {
            strictFail(parser, 'Invalid attribute name')
          }
          continue

        case S.ATTRIB_VALUE_UNQUOTED:
          if (not(attribEnd, c)) {
            if (c === '&') {
              parser.state = S.ATTRIB_VALUE_ENTITY_U
            } else {
              parser.attribValue += c
            }
            continue
          }
          attrib(parser)
          if (c === '>') {
            openTag(parser)
          } else {
            parser.state = S.ATTRIB
          }
          continue

        case S.CLOSE_TAG:
          if (!parser.tagName) {
            if (is(whitespace, c)) {
              continue
            } else if (not(nameStart, c)) {
              if (parser.script) {
                parser.script += '</' + c
                parser.state = S.SCRIPT
              } else {
                strictFail(parser, 'Invalid tagname in closing tag.')
              }
            } else {
              parser.tagName = c
            }
          } else if (c === '>') {
            closeTag(parser)
          } else if (is(nameBody, c)) {
            parser.tagName += c
          } else if (parser.script) {
            parser.script += '</' + parser.tagName
            parser.tagName = ''
            parser.state = S.SCRIPT
          } else {
            if (not(whitespace, c)) {
              strictFail(parser, 'Invalid tagname in closing tag')
            }
            parser.state = S.CLOSE_TAG_SAW_WHITE
          }
          continue

        case S.CLOSE_TAG_SAW_WHITE:
          if (is(whitespace, c)) {
            continue
          }
          if (c === '>') {
            closeTag(parser)
          } else {
            strictFail(parser, 'Invalid characters in closing tag')
          }
          continue

        case S.TEXT_ENTITY:
        case S.ATTRIB_VALUE_ENTITY_Q:
        case S.ATTRIB_VALUE_ENTITY_U:
          var returnState
          var buffer
          switch (parser.state) {
            case S.TEXT_ENTITY:
              returnState = S.TEXT
              buffer = 'textNode'
              break

            case S.ATTRIB_VALUE_ENTITY_Q:
              returnState = S.ATTRIB_VALUE_QUOTED
              buffer = 'attribValue'
              break

            case S.ATTRIB_VALUE_ENTITY_U:
              returnState = S.ATTRIB_VALUE_UNQUOTED
              buffer = 'attribValue'
              break
          }

          if (c === ';') {
            parser[buffer] += parseEntity(parser)
            parser.entity = ''
            parser.state = returnState
          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {
            parser.entity += c
          } else {
            strictFail(parser, 'Invalid character in entity name')
            parser[buffer] += '&' + parser.entity + c
            parser.entity = ''
            parser.state = returnState
          }

          continue

        default:
          throw new Error(parser, 'Unknown state: ' + parser.state)
      }
    } // while

    if (parser.position >= parser.bufferCheckPosition) {
      checkBufferLength(parser)
    }
    return parser
  }

  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
  if (!String.fromCodePoint) {
    (function () {
      var stringFromCharCode = String.fromCharCode
      var floor = Math.floor
      var fromCodePoint = function () {
        var MAX_SIZE = 0x4000
        var codeUnits = []
        var highSurrogate
        var lowSurrogate
        var index = -1
        var length = arguments.length
        if (!length) {
          return ''
        }
        var result = ''
        while (++index < length) {
          var codePoint = Number(arguments[index])
          if (
            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
            codePoint < 0 || // not a valid Unicode code point
            codePoint > 0x10FFFF || // not a valid Unicode code point
            floor(codePoint) !== codePoint // not an integer
          ) {
            throw RangeError('Invalid code point: ' + codePoint)
          }
          if (codePoint <= 0xFFFF) { // BMP code point
            codeUnits.push(codePoint)
          } else { // Astral code point; split in surrogate halves
            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            codePoint -= 0x10000
            highSurrogate = (codePoint >> 10) + 0xD800
            lowSurrogate = (codePoint % 0x400) + 0xDC00
            codeUnits.push(highSurrogate, lowSurrogate)
          }
          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
            result += stringFromCharCode.apply(null, codeUnits)
            codeUnits.length = 0
          }
        }
        return result
      }
      if (Object.defineProperty) {
        Object.defineProperty(String, 'fromCodePoint', {
          value: fromCodePoint,
          configurable: true,
          writable: true
        })
      } else {
        String.fromCodePoint = fromCodePoint
      }
    }())
  }
})(typeof exports === 'undefined' ? this.sax = {} : exports)

}).call(this,require("buffer").Buffer)

},{"buffer":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\index.js","stream":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\stream-browserify\\index.js","string_decoder":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\string_decoder\\index.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLAttribute.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLAttribute, create;

  create = require('lodash/create');

  module.exports = XMLAttribute = (function() {
    function XMLAttribute(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing attribute name of element " + parent.name);
      }
      if (value == null) {
        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
      }
      this.name = this.stringify.attName(name);
      this.value = this.stringify.attValue(value);
    }

    XMLAttribute.prototype.clone = function() {
      return create(XMLAttribute.prototype, this);
    };

    XMLAttribute.prototype.toString = function(options, level) {
      return ' ' + this.name + '="' + this.value + '"';
    };

    return XMLAttribute;

  })();

}).call(this);

},{"lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLBuilder.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;

  XMLStringifier = require('./XMLStringifier');

  XMLDeclaration = require('./XMLDeclaration');

  XMLDocType = require('./XMLDocType');

  XMLElement = require('./XMLElement');

  module.exports = XMLBuilder = (function() {
    function XMLBuilder(name, options) {
      var root, temp;
      if (name == null) {
        throw new Error("Root element needs a name");
      }
      if (options == null) {
        options = {};
      }
      this.options = options;
      this.stringify = new XMLStringifier(options);
      temp = new XMLElement(this, 'doc');
      root = temp.element(name);
      root.isRoot = true;
      root.documentObject = this;
      this.rootObject = root;
      if (!options.headless) {
        root.declaration(options);
        if ((options.pubID != null) || (options.sysID != null)) {
          root.doctype(options);
        }
      }
    }

    XMLBuilder.prototype.root = function() {
      return this.rootObject;
    };

    XMLBuilder.prototype.end = function(options) {
      return this.toString(options);
    };

    XMLBuilder.prototype.toString = function(options) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      r = '';
      if (this.xmldec != null) {
        r += this.xmldec.toString(options);
      }
      if (this.doctype != null) {
        r += this.doctype.toString(options);
      }
      r += this.rootObject.toString(options);
      if (pretty && r.slice(-newline.length) === newline) {
        r = r.slice(0, -newline.length);
      }
      return r;
    };

    return XMLBuilder;

  })();

}).call(this);

},{"./XMLDeclaration":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDeclaration.js","./XMLDocType":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDocType.js","./XMLElement":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLElement.js","./XMLStringifier":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLStringifier.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLCData.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLNode, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLCData = (function(superClass) {
    extend(XMLCData, superClass);

    function XMLCData(parent, text) {
      XMLCData.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing CDATA text");
      }
      this.text = this.stringify.cdata(text);
    }

    XMLCData.prototype.clone = function() {
      return create(XMLCData.prototype, this);
    };

    XMLCData.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<![CDATA[' + this.text + ']]>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLCData;

  })(XMLNode);

}).call(this);

},{"./XMLNode":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLNode.js","lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLComment.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLComment, XMLNode, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLComment = (function(superClass) {
    extend(XMLComment, superClass);

    function XMLComment(parent, text) {
      XMLComment.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing comment text");
      }
      this.text = this.stringify.comment(text);
    }

    XMLComment.prototype.clone = function() {
      return create(XMLComment.prototype, this);
    };

    XMLComment.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!-- ' + this.text + ' -->';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLComment;

  })(XMLNode);

}).call(this);

},{"./XMLNode":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLNode.js","lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDTDAttList.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDAttList, create;

  create = require('lodash/create');

  module.exports = XMLDTDAttList = (function() {
    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      this.stringify = parent.stringify;
      if (elementName == null) {
        throw new Error("Missing DTD element name");
      }
      if (attributeName == null) {
        throw new Error("Missing DTD attribute name");
      }
      if (!attributeType) {
        throw new Error("Missing DTD attribute type");
      }
      if (!defaultValueType) {
        throw new Error("Missing DTD attribute default");
      }
      if (defaultValueType.indexOf('#') !== 0) {
        defaultValueType = '#' + defaultValueType;
      }
      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
      }
      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
        throw new Error("Default value only applies to #FIXED or #DEFAULT");
      }
      this.elementName = this.stringify.eleName(elementName);
      this.attributeName = this.stringify.attName(attributeName);
      this.attributeType = this.stringify.dtdAttType(attributeType);
      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
      this.defaultValueType = defaultValueType;
    }

    XMLDTDAttList.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;
      if (this.defaultValueType !== '#DEFAULT') {
        r += ' ' + this.defaultValueType;
      }
      if (this.defaultValue) {
        r += ' "' + this.defaultValue + '"';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDAttList;

  })();

}).call(this);

},{"lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDTDElement.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDElement, create;

  create = require('lodash/create');

  module.exports = XMLDTDElement = (function() {
    function XMLDTDElement(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing DTD element name");
      }
      if (!value) {
        value = '(#PCDATA)';
      }
      if (Array.isArray(value)) {
        value = '(' + value.join(',') + ')';
      }
      this.name = this.stringify.eleName(name);
      this.value = this.stringify.dtdElementValue(value);
    }

    XMLDTDElement.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ELEMENT ' + this.name + ' ' + this.value + '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDElement;

  })();

}).call(this);

},{"lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDTDEntity.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDEntity, create, isObject;

  create = require('lodash/create');

  isObject = require('lodash/isObject');

  module.exports = XMLDTDEntity = (function() {
    function XMLDTDEntity(parent, pe, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing entity name");
      }
      if (value == null) {
        throw new Error("Missing entity value");
      }
      this.pe = !!pe;
      this.name = this.stringify.eleName(name);
      if (!isObject(value)) {
        this.value = this.stringify.dtdEntityValue(value);
      } else {
        if (!value.pubID && !value.sysID) {
          throw new Error("Public and/or system identifiers are required for an external entity");
        }
        if (value.pubID && !value.sysID) {
          throw new Error("System identifier is required for a public external entity");
        }
        if (value.pubID != null) {
          this.pubID = this.stringify.dtdPubID(value.pubID);
        }
        if (value.sysID != null) {
          this.sysID = this.stringify.dtdSysID(value.sysID);
        }
        if (value.nData != null) {
          this.nData = this.stringify.dtdNData(value.nData);
        }
        if (this.pe && this.nData) {
          throw new Error("Notation declaration is not allowed in a parameter entity");
        }
      }
    }

    XMLDTDEntity.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ENTITY';
      if (this.pe) {
        r += ' %';
      }
      r += ' ' + this.name;
      if (this.value) {
        r += ' "' + this.value + '"';
      } else {
        if (this.pubID && this.sysID) {
          r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
        } else if (this.sysID) {
          r += ' SYSTEM "' + this.sysID + '"';
        }
        if (this.nData) {
          r += ' NDATA ' + this.nData;
        }
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDEntity;

  })();

}).call(this);

},{"lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js","lodash/isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDTDNotation.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDNotation, create;

  create = require('lodash/create');

  module.exports = XMLDTDNotation = (function() {
    function XMLDTDNotation(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing notation name");
      }
      if (!value.pubID && !value.sysID) {
        throw new Error("Public or system identifiers are required for an external entity");
      }
      this.name = this.stringify.eleName(name);
      if (value.pubID != null) {
        this.pubID = this.stringify.dtdPubID(value.pubID);
      }
      if (value.sysID != null) {
        this.sysID = this.stringify.dtdSysID(value.sysID);
      }
    }

    XMLDTDNotation.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!NOTATION ' + this.name;
      if (this.pubID && this.sysID) {
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
      } else if (this.pubID) {
        r += ' PUBLIC "' + this.pubID + '"';
      } else if (this.sysID) {
        r += ' SYSTEM "' + this.sysID + '"';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDNotation;

  })();

}).call(this);

},{"lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDeclaration.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDeclaration, XMLNode, create, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/create');

  isObject = require('lodash/isObject');

  XMLNode = require('./XMLNode');

  module.exports = XMLDeclaration = (function(superClass) {
    extend(XMLDeclaration, superClass);

    function XMLDeclaration(parent, version, encoding, standalone) {
      var ref;
      XMLDeclaration.__super__.constructor.call(this, parent);
      if (isObject(version)) {
        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
      }
      if (!version) {
        version = '1.0';
      }
      this.version = this.stringify.xmlVersion(version);
      if (encoding != null) {
        this.encoding = this.stringify.xmlEncoding(encoding);
      }
      if (standalone != null) {
        this.standalone = this.stringify.xmlStandalone(standalone);
      }
    }

    XMLDeclaration.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<?xml';
      r += ' version="' + this.version + '"';
      if (this.encoding != null) {
        r += ' encoding="' + this.encoding + '"';
      }
      if (this.standalone != null) {
        r += ' standalone="' + this.standalone + '"';
      }
      r += '?>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDeclaration;

  })(XMLNode);

}).call(this);

},{"./XMLNode":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLNode.js","lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js","lodash/isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDocType.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLProcessingInstruction, create, isObject;

  create = require('lodash/create');

  isObject = require('lodash/isObject');

  XMLCData = require('./XMLCData');

  XMLComment = require('./XMLComment');

  XMLDTDAttList = require('./XMLDTDAttList');

  XMLDTDEntity = require('./XMLDTDEntity');

  XMLDTDElement = require('./XMLDTDElement');

  XMLDTDNotation = require('./XMLDTDNotation');

  XMLProcessingInstruction = require('./XMLProcessingInstruction');

  module.exports = XMLDocType = (function() {
    function XMLDocType(parent, pubID, sysID) {
      var ref, ref1;
      this.documentObject = parent;
      this.stringify = this.documentObject.stringify;
      this.children = [];
      if (isObject(pubID)) {
        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
      }
      if (sysID == null) {
        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
      }
      if (pubID != null) {
        this.pubID = this.stringify.dtdPubID(pubID);
      }
      if (sysID != null) {
        this.sysID = this.stringify.dtdSysID(sysID);
      }
    }

    XMLDocType.prototype.element = function(name, value) {
      var child;
      child = new XMLDTDElement(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      var child;
      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.entity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, false, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.pEntity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, true, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.notation = function(name, value) {
      var child;
      child = new XMLDTDNotation(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.instruction = function(target, value) {
      var child;
      child = new XMLProcessingInstruction(this, target, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.root = function() {
      return this.documentObject.root();
    };

    XMLDocType.prototype.document = function() {
      return this.documentObject;
    };

    XMLDocType.prototype.toString = function(options, level) {
      var child, i, indent, len, newline, offset, pretty, r, ref, ref1, ref2, ref3, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!DOCTYPE ' + this.root().name;
      if (this.pubID && this.sysID) {
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
      } else if (this.sysID) {
        r += ' SYSTEM "' + this.sysID + '"';
      }
      if (this.children.length > 0) {
        r += ' [';
        if (pretty) {
          r += newline;
        }
        ref3 = this.children;
        for (i = 0, len = ref3.length; i < len; i++) {
          child = ref3[i];
          r += child.toString(options, level + 1);
        }
        r += ']';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    XMLDocType.prototype.ele = function(name, value) {
      return this.element(name, value);
    };

    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
    };

    XMLDocType.prototype.ent = function(name, value) {
      return this.entity(name, value);
    };

    XMLDocType.prototype.pent = function(name, value) {
      return this.pEntity(name, value);
    };

    XMLDocType.prototype.not = function(name, value) {
      return this.notation(name, value);
    };

    XMLDocType.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLDocType.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLDocType.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLDocType.prototype.up = function() {
      return this.root();
    };

    XMLDocType.prototype.doc = function() {
      return this.document();
    };

    return XMLDocType;

  })();

}).call(this);

},{"./XMLCData":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLCData.js","./XMLComment":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLComment.js","./XMLDTDAttList":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDTDAttList.js","./XMLDTDElement":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDTDElement.js","./XMLDTDEntity":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDTDEntity.js","./XMLDTDNotation":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDTDNotation.js","./XMLProcessingInstruction":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLProcessingInstruction.js","lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js","lodash/isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLElement.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, create, every, isFunction, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/create');

  isObject = require('lodash/isObject');

  isFunction = require('lodash/isFunction');

  every = require('lodash/every');

  XMLNode = require('./XMLNode');

  XMLAttribute = require('./XMLAttribute');

  XMLProcessingInstruction = require('./XMLProcessingInstruction');

  module.exports = XMLElement = (function(superClass) {
    extend(XMLElement, superClass);

    function XMLElement(parent, name, attributes) {
      XMLElement.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing element name");
      }
      this.name = this.stringify.eleName(name);
      this.children = [];
      this.instructions = [];
      this.attributes = {};
      if (attributes != null) {
        this.attribute(attributes);
      }
    }

    XMLElement.prototype.clone = function() {
      var att, attName, clonedSelf, i, len, pi, ref, ref1;
      clonedSelf = create(XMLElement.prototype, this);
      if (clonedSelf.isRoot) {
        clonedSelf.documentObject = null;
      }
      clonedSelf.attributes = {};
      ref = this.attributes;
      for (attName in ref) {
        if (!hasProp.call(ref, attName)) continue;
        att = ref[attName];
        clonedSelf.attributes[attName] = att.clone();
      }
      clonedSelf.instructions = [];
      ref1 = this.instructions;
      for (i = 0, len = ref1.length; i < len; i++) {
        pi = ref1[i];
        clonedSelf.instructions.push(pi.clone());
      }
      clonedSelf.children = [];
      this.children.forEach(function(child) {
        var clonedChild;
        clonedChild = child.clone();
        clonedChild.parent = clonedSelf;
        return clonedSelf.children.push(clonedChild);
      });
      return clonedSelf;
    };

    XMLElement.prototype.attribute = function(name, value) {
      var attName, attValue;
      if (name != null) {
        name = name.valueOf();
      }
      if (isObject(name)) {
        for (attName in name) {
          if (!hasProp.call(name, attName)) continue;
          attValue = name[attName];
          this.attribute(attName, attValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        if (!this.options.skipNullAttributes || (value != null)) {
          this.attributes[name] = new XMLAttribute(this, name, value);
        }
      }
      return this;
    };

    XMLElement.prototype.removeAttribute = function(name) {
      var attName, i, len;
      if (name == null) {
        throw new Error("Missing attribute name");
      }
      name = name.valueOf();
      if (Array.isArray(name)) {
        for (i = 0, len = name.length; i < len; i++) {
          attName = name[i];
          delete this.attributes[attName];
        }
      } else {
        delete this.attributes[name];
      }
      return this;
    };

    XMLElement.prototype.instruction = function(target, value) {
      var i, insTarget, insValue, instruction, len;
      if (target != null) {
        target = target.valueOf();
      }
      if (value != null) {
        value = value.valueOf();
      }
      if (Array.isArray(target)) {
        for (i = 0, len = target.length; i < len; i++) {
          insTarget = target[i];
          this.instruction(insTarget);
        }
      } else if (isObject(target)) {
        for (insTarget in target) {
          if (!hasProp.call(target, insTarget)) continue;
          insValue = target[insTarget];
          this.instruction(insTarget, insValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        instruction = new XMLProcessingInstruction(this, target, value);
        this.instructions.push(instruction);
      }
      return this;
    };

    XMLElement.prototype.toString = function(options, level) {
      var att, child, i, indent, instruction, j, len, len1, name, newline, offset, pretty, r, ref, ref1, ref2, ref3, ref4, ref5, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      ref3 = this.instructions;
      for (i = 0, len = ref3.length; i < len; i++) {
        instruction = ref3[i];
        r += instruction.toString(options, level);
      }
      if (pretty) {
        r += space;
      }
      r += '<' + this.name;
      ref4 = this.attributes;
      for (name in ref4) {
        if (!hasProp.call(ref4, name)) continue;
        att = ref4[name];
        r += att.toString(options);
      }
      if (this.children.length === 0 || every(this.children, function(e) {
        return e.value === '';
      })) {
        r += '/>';
        if (pretty) {
          r += newline;
        }
      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {
        r += '>';
        r += this.children[0].value;
        r += '</' + this.name + '>';
        r += newline;
      } else {
        r += '>';
        if (pretty) {
          r += newline;
        }
        ref5 = this.children;
        for (j = 0, len1 = ref5.length; j < len1; j++) {
          child = ref5[j];
          r += child.toString(options, level + 1);
        }
        if (pretty) {
          r += space;
        }
        r += '</' + this.name + '>';
        if (pretty) {
          r += newline;
        }
      }
      return r;
    };

    XMLElement.prototype.att = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLElement.prototype.a = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.i = function(target, value) {
      return this.instruction(target, value);
    };

    return XMLElement;

  })(XMLNode);

}).call(this);

},{"./XMLAttribute":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLAttribute.js","./XMLNode":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLNode.js","./XMLProcessingInstruction":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLProcessingInstruction.js","lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js","lodash/every":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\every.js","lodash/isFunction":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isFunction.js","lodash/isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLNode.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLRaw, XMLText, isEmpty, isFunction, isObject,
    hasProp = {}.hasOwnProperty;

  isObject = require('lodash/isObject');

  isFunction = require('lodash/isFunction');

  isEmpty = require('lodash/isEmpty');

  XMLElement = null;

  XMLCData = null;

  XMLComment = null;

  XMLDeclaration = null;

  XMLDocType = null;

  XMLRaw = null;

  XMLText = null;

  module.exports = XMLNode = (function() {
    function XMLNode(parent) {
      this.parent = parent;
      this.options = this.parent.options;
      this.stringify = this.parent.stringify;
      if (XMLElement === null) {
        XMLElement = require('./XMLElement');
        XMLCData = require('./XMLCData');
        XMLComment = require('./XMLComment');
        XMLDeclaration = require('./XMLDeclaration');
        XMLDocType = require('./XMLDocType');
        XMLRaw = require('./XMLRaw');
        XMLText = require('./XMLText');
      }
    }

    XMLNode.prototype.element = function(name, attributes, text) {
      var childNode, item, j, k, key, lastChild, len, len1, ref, val;
      lastChild = null;
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref = [attributes, text], text = ref[0], attributes = ref[1];
      }
      if (name != null) {
        name = name.valueOf();
      }
      if (Array.isArray(name)) {
        for (j = 0, len = name.length; j < len; j++) {
          item = name[j];
          lastChild = this.element(item);
        }
      } else if (isFunction(name)) {
        lastChild = this.element(name.apply());
      } else if (isObject(name)) {
        for (key in name) {
          if (!hasProp.call(name, key)) continue;
          val = name[key];
          if (isFunction(val)) {
            val = val.apply();
          }
          if ((isObject(val)) && (isEmpty(val))) {
            val = null;
          }
          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
          } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey) === 0) {
            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length), val);
          } else if (!this.options.separateArrayItems && Array.isArray(val)) {
            for (k = 0, len1 = val.length; k < len1; k++) {
              item = val[k];
              childNode = {};
              childNode[key] = item;
              lastChild = this.element(childNode);
            }
          } else if (isObject(val)) {
            lastChild = this.element(key);
            lastChild.element(val);
          } else {
            lastChild = this.element(key, val);
          }
        }
      } else {
        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
          lastChild = this.text(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
          lastChild = this.cdata(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
          lastChild = this.comment(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
          lastChild = this.raw(text);
        } else {
          lastChild = this.node(name, attributes, text);
        }
      }
      if (lastChild == null) {
        throw new Error("Could not create any elements with: " + name);
      }
      return lastChild;
    };

    XMLNode.prototype.insertBefore = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.insertAfter = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i + 1);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.remove = function() {
      var i, ref;
      if (this.isRoot) {
        throw new Error("Cannot remove the root element");
      }
      i = this.parent.children.indexOf(this);
      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref = [])), ref;
      return this.parent;
    };

    XMLNode.prototype.node = function(name, attributes, text) {
      var child, ref;
      if (name != null) {
        name = name.valueOf();
      }
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref = [attributes, text], text = ref[0], attributes = ref[1];
      }
      child = new XMLElement(this, name, attributes);
      if (text != null) {
        child.text(text);
      }
      this.children.push(child);
      return child;
    };

    XMLNode.prototype.text = function(value) {
      var child;
      child = new XMLText(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.raw = function(value) {
      var child;
      child = new XMLRaw(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.declaration = function(version, encoding, standalone) {
      var doc, xmldec;
      doc = this.document();
      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
      doc.xmldec = xmldec;
      return doc.root();
    };

    XMLNode.prototype.doctype = function(pubID, sysID) {
      var doc, doctype;
      doc = this.document();
      doctype = new XMLDocType(doc, pubID, sysID);
      doc.doctype = doctype;
      return doctype;
    };

    XMLNode.prototype.up = function() {
      if (this.isRoot) {
        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
      }
      return this.parent;
    };

    XMLNode.prototype.root = function() {
      var child;
      if (this.isRoot) {
        return this;
      }
      child = this.parent;
      while (!child.isRoot) {
        child = child.parent;
      }
      return child;
    };

    XMLNode.prototype.document = function() {
      return this.root().documentObject;
    };

    XMLNode.prototype.end = function(options) {
      return this.document().toString(options);
    };

    XMLNode.prototype.prev = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i < 1) {
        throw new Error("Already at the first node");
      }
      return this.parent.children[i - 1];
    };

    XMLNode.prototype.next = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i === -1 || i === this.parent.children.length - 1) {
        throw new Error("Already at the last node");
      }
      return this.parent.children[i + 1];
    };

    XMLNode.prototype.importXMLBuilder = function(xmlbuilder) {
      var clonedRoot;
      clonedRoot = xmlbuilder.root().clone();
      clonedRoot.parent = this;
      clonedRoot.isRoot = false;
      this.children.push(clonedRoot);
      return this;
    };

    XMLNode.prototype.ele = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.nod = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.txt = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.doc = function() {
      return this.document();
    };

    XMLNode.prototype.dec = function(version, encoding, standalone) {
      return this.declaration(version, encoding, standalone);
    };

    XMLNode.prototype.dtd = function(pubID, sysID) {
      return this.doctype(pubID, sysID);
    };

    XMLNode.prototype.e = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.n = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.t = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.d = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.c = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.r = function(value) {
      return this.raw(value);
    };

    XMLNode.prototype.u = function() {
      return this.up();
    };

    return XMLNode;

  })();

}).call(this);

},{"./XMLCData":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLCData.js","./XMLComment":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLComment.js","./XMLDeclaration":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDeclaration.js","./XMLDocType":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLDocType.js","./XMLElement":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLElement.js","./XMLRaw":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLRaw.js","./XMLText":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLText.js","lodash/isEmpty":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isEmpty.js","lodash/isFunction":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isFunction.js","lodash/isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLProcessingInstruction.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLProcessingInstruction, create;

  create = require('lodash/create');

  module.exports = XMLProcessingInstruction = (function() {
    function XMLProcessingInstruction(parent, target, value) {
      this.stringify = parent.stringify;
      if (target == null) {
        throw new Error("Missing instruction target");
      }
      this.target = this.stringify.insTarget(target);
      if (value) {
        this.value = this.stringify.insValue(value);
      }
    }

    XMLProcessingInstruction.prototype.clone = function() {
      return create(XMLProcessingInstruction.prototype, this);
    };

    XMLProcessingInstruction.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<?';
      r += this.target;
      if (this.value) {
        r += ' ' + this.value;
      }
      r += '?>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLProcessingInstruction;

  })();

}).call(this);

},{"lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLRaw.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLNode, XMLRaw, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLRaw = (function(superClass) {
    extend(XMLRaw, superClass);

    function XMLRaw(parent, text) {
      XMLRaw.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing raw text");
      }
      this.value = this.stringify.raw(text);
    }

    XMLRaw.prototype.clone = function() {
      return create(XMLRaw.prototype, this);
    };

    XMLRaw.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += this.value;
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLRaw;

  })(XMLNode);

}).call(this);

},{"./XMLNode":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLNode.js","lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLStringifier.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLStringifier,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  module.exports = XMLStringifier = (function() {
    function XMLStringifier(options) {
      this.assertLegalChar = bind(this.assertLegalChar, this);
      var key, ref, value;
      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;
      this.noDoubleEncoding = options != null ? options.noDoubleEncoding : void 0;
      ref = (options != null ? options.stringify : void 0) || {};
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this[key] = value;
      }
    }

    XMLStringifier.prototype.eleName = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.eleText = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(this.elEscape(val));
    };

    XMLStringifier.prototype.cdata = function(val) {
      val = '' + val || '';
      if (val.match(/]]>/)) {
        throw new Error("Invalid CDATA text: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.comment = function(val) {
      val = '' + val || '';
      if (val.match(/--/)) {
        throw new Error("Comment text cannot contain double-hypen: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.raw = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attName = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attValue = function(val) {
      val = '' + val || '';
      return this.attEscape(val);
    };

    XMLStringifier.prototype.insTarget = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.insValue = function(val) {
      val = '' + val || '';
      if (val.match(/\?>/)) {
        throw new Error("Invalid processing instruction value: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlVersion = function(val) {
      val = '' + val || '';
      if (!val.match(/1\.[0-9]+/)) {
        throw new Error("Invalid version number: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlEncoding = function(val) {
      val = '' + val || '';
      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {
        throw new Error("Invalid encoding: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlStandalone = function(val) {
      if (val) {
        return "yes";
      } else {
        return "no";
      }
    };

    XMLStringifier.prototype.dtdPubID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdSysID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdElementValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttType = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttDefault = function(val) {
      if (val != null) {
        return '' + val || '';
      } else {
        return val;
      }
    };

    XMLStringifier.prototype.dtdEntityValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdNData = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.convertAttKey = '@';

    XMLStringifier.prototype.convertPIKey = '?';

    XMLStringifier.prototype.convertTextKey = '#text';

    XMLStringifier.prototype.convertCDataKey = '#cdata';

    XMLStringifier.prototype.convertCommentKey = '#comment';

    XMLStringifier.prototype.convertRawKey = '#raw';

    XMLStringifier.prototype.assertLegalChar = function(str) {
      var chars, chr;
      if (this.allowSurrogateChars) {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
      } else {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
      }
      chr = str.match(chars);
      if (chr) {
        throw new Error("Invalid character (" + chr + ") in string: " + str + " at index " + chr.index);
      }
      return str;
    };

    XMLStringifier.prototype.elEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
    };

    XMLStringifier.prototype.attEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;');
    };

    return XMLStringifier;

  })();

}).call(this);

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLText.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLNode, XMLText, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLText = (function(superClass) {
    extend(XMLText, superClass);

    function XMLText(parent, text) {
      XMLText.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing element text");
      }
      this.value = this.stringify.eleText(text);
    }

    XMLText.prototype.clone = function() {
      return create(XMLText.prototype, this);
    };

    XMLText.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += this.value;
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLText;

  })(XMLNode);

}).call(this);

},{"./XMLNode":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLNode.js","lodash/create":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\index.js":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLBuilder, assign;

  assign = require('lodash/assign');

  XMLBuilder = require('./XMLBuilder');

  module.exports.create = function(name, xmldec, doctype, options) {
    options = assign({}, xmldec, doctype, options);
    return new XMLBuilder(name, options).root();
  };

}).call(this);

},{"./XMLBuilder":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\lib\\XMLBuilder.js","lodash/assign":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\assign.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_DataView.js":[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getNative.js","./_root":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_root.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Hash.js":[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hashClear.js","./_hashDelete":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hashDelete.js","./_hashGet":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hashGet.js","./_hashHas":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hashHas.js","./_hashSet":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hashSet.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_ListCache.js":[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_listCacheClear.js","./_listCacheDelete":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_listCacheDelete.js","./_listCacheGet":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_listCacheGet.js","./_listCacheHas":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_listCacheHas.js","./_listCacheSet":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_listCacheSet.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Map.js":[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getNative.js","./_root":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_root.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_MapCache.js":[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapCacheClear.js","./_mapCacheDelete":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapCacheDelete.js","./_mapCacheGet":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapCacheGet.js","./_mapCacheHas":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapCacheHas.js","./_mapCacheSet":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapCacheSet.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Promise.js":[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getNative.js","./_root":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_root.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Set.js":[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getNative.js","./_root":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_root.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_SetCache.js":[function(require,module,exports){
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

},{"./_MapCache":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_MapCache.js","./_setCacheAdd":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_setCacheAdd.js","./_setCacheHas":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_setCacheHas.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Stack.js":[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_ListCache.js","./_stackClear":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stackClear.js","./_stackDelete":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stackDelete.js","./_stackGet":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stackGet.js","./_stackHas":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stackHas.js","./_stackSet":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stackSet.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Symbol.js":[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_root.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Uint8Array.js":[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_root.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_WeakMap.js":[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getNative.js","./_root":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_root.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_apply.js":[function(require,module,exports){
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  var length = args.length;
  switch (length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_arrayEvery.js":[function(require,module,exports){
/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */
function arrayEvery(array, predicate) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }
  return true;
}

module.exports = arrayEvery;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_arrayMap.js":[function(require,module,exports){
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_arraySome.js":[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_assignValue.js":[function(require,module,exports){
var eq = require('./eq');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

module.exports = assignValue;

},{"./eq":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\eq.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_assocIndexOf.js":[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to search.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\eq.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseAssign.js":[function(require,module,exports){
var copyObject = require('./_copyObject'),
    keys = require('./keys');

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;

},{"./_copyObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_copyObject.js","./keys":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\keys.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseCreate.js":[function(require,module,exports){
var isObject = require('./isObject');

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

module.exports = baseCreate;

},{"./isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseEach.js":[function(require,module,exports){
var baseForOwn = require('./_baseForOwn'),
    createBaseEach = require('./_createBaseEach');

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

},{"./_baseForOwn":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseForOwn.js","./_createBaseEach":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_createBaseEach.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseEvery.js":[function(require,module,exports){
var baseEach = require('./_baseEach');

/**
 * The base implementation of `_.every` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */
function baseEvery(collection, predicate) {
  var result = true;
  baseEach(collection, function(value, index, collection) {
    result = !!predicate(value, index, collection);
    return result;
  });
  return result;
}

module.exports = baseEvery;

},{"./_baseEach":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseEach.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseFor.js":[function(require,module,exports){
var createBaseFor = require('./_createBaseFor');

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

},{"./_createBaseFor":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_createBaseFor.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseForOwn.js":[function(require,module,exports){
var baseFor = require('./_baseFor'),
    keys = require('./keys');

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

},{"./_baseFor":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseFor.js","./keys":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\keys.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseGet.js":[function(require,module,exports){
var castPath = require('./_castPath'),
    isKey = require('./_isKey'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

},{"./_castPath":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_castPath.js","./_isKey":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isKey.js","./_toKey":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_toKey.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseHas.js":[function(require,module,exports){
var getPrototype = require('./_getPrototype');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
  // that are composed entirely of index properties, return `false` for
  // `hasOwnProperty` checks of them.
  return hasOwnProperty.call(object, key) ||
    (typeof object == 'object' && key in object && getPrototype(object) === null);
}

module.exports = baseHas;

},{"./_getPrototype":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getPrototype.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseHasIn.js":[function(require,module,exports){
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return key in Object(object);
}

module.exports = baseHasIn;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseIsEqual.js":[function(require,module,exports){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObject = require('./isObject'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseIsEqualDeep.js","./isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js","./isObjectLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObjectLike.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseIsEqualDeep.js":[function(require,module,exports){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isHostObject = require('./_isHostObject'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for comparison styles. */
var PARTIAL_COMPARE_FLAG = 2;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Stack.js","./_equalArrays":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_equalArrays.js","./_equalByTag":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_equalByTag.js","./_equalObjects":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_equalObjects.js","./_getTag":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getTag.js","./_isHostObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isHostObject.js","./isArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArray.js","./isTypedArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isTypedArray.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseIsMatch.js":[function(require,module,exports){
var Stack = require('./_Stack'),
    baseIsEqual = require('./_baseIsEqual');

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

},{"./_Stack":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Stack.js","./_baseIsEqual":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseIsEqual.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseIteratee.js":[function(require,module,exports){
var baseMatches = require('./_baseMatches'),
    baseMatchesProperty = require('./_baseMatchesProperty'),
    identity = require('./identity'),
    isArray = require('./isArray'),
    property = require('./property');

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

},{"./_baseMatches":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseMatches.js","./_baseMatchesProperty":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseMatchesProperty.js","./identity":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\identity.js","./isArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArray.js","./property":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\property.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseKeys.js":[function(require,module,exports){
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = Object.keys;

/**
 * The base implementation of `_.keys` which doesn't skip the constructor
 * property of prototypes or treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  return nativeKeys(Object(object));
}

module.exports = baseKeys;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseMatches.js":[function(require,module,exports){
var baseIsMatch = require('./_baseIsMatch'),
    getMatchData = require('./_getMatchData'),
    matchesStrictComparable = require('./_matchesStrictComparable');

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

},{"./_baseIsMatch":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseIsMatch.js","./_getMatchData":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getMatchData.js","./_matchesStrictComparable":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_matchesStrictComparable.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseMatchesProperty.js":[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual'),
    get = require('./get'),
    hasIn = require('./hasIn'),
    isKey = require('./_isKey'),
    isStrictComparable = require('./_isStrictComparable'),
    matchesStrictComparable = require('./_matchesStrictComparable'),
    toKey = require('./_toKey');

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

module.exports = baseMatchesProperty;

},{"./_baseIsEqual":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseIsEqual.js","./_isKey":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isKey.js","./_isStrictComparable":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isStrictComparable.js","./_matchesStrictComparable":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_matchesStrictComparable.js","./_toKey":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_toKey.js","./get":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\get.js","./hasIn":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\hasIn.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseProperty.js":[function(require,module,exports){
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_basePropertyDeep.js":[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

},{"./_baseGet":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseGet.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseTimes.js":[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseToPairs.js":[function(require,module,exports){
var arrayMap = require('./_arrayMap');

/**
 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
 * of key-value pairs for `object` corresponding to the property names of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the key-value pairs.
 */
function baseToPairs(object, props) {
  return arrayMap(props, function(key) {
    return [key, object[key]];
  });
}

module.exports = baseToPairs;

},{"./_arrayMap":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_arrayMap.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseToString.js":[function(require,module,exports){
var Symbol = require('./_Symbol'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;

},{"./_Symbol":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Symbol.js","./isSymbol":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isSymbol.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_castPath.js":[function(require,module,exports){
var isArray = require('./isArray'),
    stringToPath = require('./_stringToPath');

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

module.exports = castPath;

},{"./_stringToPath":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stringToPath.js","./isArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArray.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_checkGlobal.js":[function(require,module,exports){
/**
 * Checks if `value` is a global object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {null|Object} Returns `value` if it's a global object, else `null`.
 */
function checkGlobal(value) {
  return (value && value.Object === Object) ? value : null;
}

module.exports = checkGlobal;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_copyObject.js":[function(require,module,exports){
var assignValue = require('./_assignValue');

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : source[key];

    assignValue(object, key, newValue);
  }
  return object;
}

module.exports = copyObject;

},{"./_assignValue":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_assignValue.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_createAssigner.js":[function(require,module,exports){
var isIterateeCall = require('./_isIterateeCall'),
    rest = require('./rest');

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return rest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;

},{"./_isIterateeCall":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isIterateeCall.js","./rest":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\rest.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_createBaseEach.js":[function(require,module,exports){
var isArrayLike = require('./isArrayLike');

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

},{"./isArrayLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArrayLike.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_createBaseFor.js":[function(require,module,exports){
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_createToPairs.js":[function(require,module,exports){
var baseToPairs = require('./_baseToPairs'),
    getTag = require('./_getTag'),
    mapToArray = require('./_mapToArray'),
    setToPairs = require('./_setToPairs');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/**
 * Creates a `_.toPairs` or `_.toPairsIn` function.
 *
 * @private
 * @param {Function} keysFunc The function to get the keys of a given object.
 * @returns {Function} Returns the new pairs function.
 */
function createToPairs(keysFunc) {
  return function(object) {
    var tag = getTag(object);
    if (tag == mapTag) {
      return mapToArray(object);
    }
    if (tag == setTag) {
      return setToPairs(object);
    }
    return baseToPairs(object, keysFunc(object));
  };
}

module.exports = createToPairs;

},{"./_baseToPairs":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseToPairs.js","./_getTag":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getTag.js","./_mapToArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapToArray.js","./_setToPairs":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_setToPairs.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_equalArrays.js":[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome');

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

  stack.set(array, other);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, customizer, bitmask, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  return result;
}

module.exports = equalArrays;

},{"./_SetCache":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_SetCache.js","./_arraySome":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_arraySome.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_equalByTag.js":[function(require,module,exports){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
      // Coerce dates and booleans to numbers, dates to milliseconds and
      // booleans to `1` or `0` treating invalid dates coerced to `NaN` as
      // not equal.
      return +object == +other;

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case numberTag:
      // Treat `NaN` vs. `NaN` as equal.
      return (object != +object) ? other != +other : object == +other;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= UNORDERED_COMPARE_FLAG;
      stack.set(object, other);

      // Recursively compare objects (susceptible to call stack limits).
      return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Symbol.js","./_Uint8Array":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Uint8Array.js","./_equalArrays":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_equalArrays.js","./_mapToArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapToArray.js","./_setToArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_setToArray.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_equalObjects.js":[function(require,module,exports){
var baseHas = require('./_baseHas'),
    keys = require('./keys');

/** Used to compose bitmasks for comparison styles. */
var PARTIAL_COMPARE_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : baseHas(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  return result;
}

module.exports = equalObjects;

},{"./_baseHas":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseHas.js","./keys":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\keys.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getLength.js":[function(require,module,exports){
var baseProperty = require('./_baseProperty');

/**
 * Gets the "length" property value of `object`.
 *
 * **Note:** This function is used to avoid a
 * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
 * Safari on at least iOS 8.1-8.3 ARM64.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {*} Returns the "length" value.
 */
var getLength = baseProperty('length');

module.exports = getLength;

},{"./_baseProperty":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseProperty.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getMapData.js":[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isKeyable.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getMatchData.js":[function(require,module,exports){
var isStrictComparable = require('./_isStrictComparable'),
    toPairs = require('./toPairs');

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = toPairs(object),
      length = result.length;

  while (length--) {
    result[length][2] = isStrictComparable(result[length][1]);
  }
  return result;
}

module.exports = getMatchData;

},{"./_isStrictComparable":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isStrictComparable.js","./toPairs":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\toPairs.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getNative.js":[function(require,module,exports){
var isNative = require('./isNative');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = object[key];
  return isNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./isNative":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isNative.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getPrototype.js":[function(require,module,exports){
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetPrototype = Object.getPrototypeOf;

/**
 * Gets the `[[Prototype]]` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {null|Object} Returns the `[[Prototype]]`.
 */
function getPrototype(value) {
  return nativeGetPrototype(Object(value));
}

module.exports = getPrototype;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getTag.js":[function(require,module,exports){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function getTag(value) {
  return objectToString.call(value);
}

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

},{"./_DataView":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_DataView.js","./_Map":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Map.js","./_Promise":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Promise.js","./_Set":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Set.js","./_WeakMap":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_WeakMap.js","./_toSource":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_toSource.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hasPath.js":[function(require,module,exports){
var castPath = require('./_castPath'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isIndex = require('./_isIndex'),
    isKey = require('./_isKey'),
    isLength = require('./isLength'),
    isString = require('./isString'),
    toKey = require('./_toKey');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);

  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result) {
    return result;
  }
  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isString(object) || isArguments(object));
}

module.exports = hasPath;

},{"./_castPath":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_castPath.js","./_isIndex":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isIndex.js","./_isKey":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isKey.js","./_toKey":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_toKey.js","./isArguments":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArguments.js","./isArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArray.js","./isLength":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isLength.js","./isString":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isString.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hashClear.js":[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

module.exports = hashClear;

},{"./_nativeCreate":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_nativeCreate.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hashDelete.js":[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

module.exports = hashDelete;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hashGet.js":[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_nativeCreate.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hashHas.js":[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_nativeCreate.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hashSet.js":[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_nativeCreate.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_indexKeys.js":[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isLength = require('./isLength'),
    isString = require('./isString');

/**
 * Creates an array of index keys for `object` values of arrays,
 * `arguments` objects, and strings, otherwise `null` is returned.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array|null} Returns index keys, else `null`.
 */
function indexKeys(object) {
  var length = object ? object.length : undefined;
  if (isLength(length) &&
      (isArray(object) || isString(object) || isArguments(object))) {
    return baseTimes(length, String);
  }
  return null;
}

module.exports = indexKeys;

},{"./_baseTimes":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseTimes.js","./isArguments":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArguments.js","./isArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArray.js","./isLength":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isLength.js","./isString":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isString.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isHostObject.js":[function(require,module,exports){
/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

module.exports = isHostObject;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isIndex.js":[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isIterateeCall.js":[function(require,module,exports){
var eq = require('./eq'),
    isArrayLike = require('./isArrayLike'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject');

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;

},{"./_isIndex":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isIndex.js","./eq":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\eq.js","./isArrayLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArrayLike.js","./isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isKey.js":[function(require,module,exports){
var isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;

},{"./isArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArray.js","./isSymbol":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isSymbol.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isKeyable.js":[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isPrototype.js":[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isStrictComparable.js":[function(require,module,exports){
var isObject = require('./isObject');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

},{"./isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_listCacheClear.js":[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

module.exports = listCacheClear;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_listCacheDelete.js":[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_assocIndexOf.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_listCacheGet.js":[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_assocIndexOf.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_listCacheHas.js":[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_assocIndexOf.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_listCacheSet.js":[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_assocIndexOf.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapCacheClear.js":[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

},{"./_Hash":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Hash.js","./_ListCache":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_ListCache.js","./_Map":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_Map.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapCacheDelete.js":[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

module.exports = mapCacheDelete;

},{"./_getMapData":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getMapData.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapCacheGet.js":[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getMapData.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapCacheHas.js":[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getMapData.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapCacheSet.js":[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getMapData.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_mapToArray.js":[function(require,module,exports){
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_matchesStrictComparable.js":[function(require,module,exports){
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_nativeCreate.js":[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getNative.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_root.js":[function(require,module,exports){
(function (global){
var checkGlobal = require('./_checkGlobal');

/** Used to determine if values are of the language type `Object`. */
var objectTypes = {
  'function': true,
  'object': true
};

/** Detect free variable `exports`. */
var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
  ? exports
  : undefined;

/** Detect free variable `module`. */
var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
  ? module
  : undefined;

/** Detect free variable `global` from Node.js. */
var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

/** Detect free variable `self`. */
var freeSelf = checkGlobal(objectTypes[typeof self] && self);

/** Detect free variable `window`. */
var freeWindow = checkGlobal(objectTypes[typeof window] && window);

/** Detect `this` as the global object. */
var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

/**
 * Used as a reference to the global object.
 *
 * The `this` value is used if it's the global object to avoid Greasemonkey's
 * restricted `window` object, otherwise the `window` object is used.
 */
var root = freeGlobal ||
  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
    freeSelf || thisGlobal || Function('return this')();

module.exports = root;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_checkGlobal":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_checkGlobal.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_setCacheAdd.js":[function(require,module,exports){
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_setCacheHas.js":[function(require,module,exports){
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_setToArray.js":[function(require,module,exports){
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_setToPairs.js":[function(require,module,exports){
/**
 * Converts `set` to its value-value pairs.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the value-value pairs.
 */
function setToPairs(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = [value, value];
  });
  return result;
}

module.exports = setToPairs;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stackClear.js":[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

module.exports = stackClear;

},{"./_ListCache":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_ListCache.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stackDelete.js":[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

module.exports = stackDelete;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stackGet.js":[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stackHas.js":[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stackSet.js":[function(require,module,exports){
var ListCache = require('./_ListCache'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {
    cache = this.__data__ = new MapCache(cache.__data__);
  }
  cache.set(key, value);
  return this;
}

module.exports = stackSet;

},{"./_ListCache":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_ListCache.js","./_MapCache":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_MapCache.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_stringToPath.js":[function(require,module,exports){
var memoize = require('./memoize'),
    toString = require('./toString');

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  var result = [];
  toString(string).replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;

},{"./memoize":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\memoize.js","./toString":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\toString.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_toKey.js":[function(require,module,exports){
var isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;

},{"./isSymbol":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isSymbol.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_toSource.js":[function(require,module,exports){
/** Used to resolve the decompiled source of functions. */
var funcToString = Function.prototype.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\assign.js":[function(require,module,exports){
var assignValue = require('./_assignValue'),
    copyObject = require('./_copyObject'),
    createAssigner = require('./_createAssigner'),
    isArrayLike = require('./isArrayLike'),
    isPrototype = require('./_isPrototype'),
    keys = require('./keys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.c = 3;
 * }
 *
 * function Bar() {
 *   this.e = 5;
 * }
 *
 * Foo.prototype.d = 4;
 * Bar.prototype.f = 6;
 *
 * _.assign({ 'a': 1 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3, 'e': 5 }
 */
var assign = createAssigner(function(object, source) {
  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;

},{"./_assignValue":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_assignValue.js","./_copyObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_copyObject.js","./_createAssigner":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_createAssigner.js","./_isPrototype":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isPrototype.js","./isArrayLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArrayLike.js","./keys":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\keys.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\constant.js":[function(require,module,exports){
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var object = { 'user': 'fred' };
 * var getter = _.constant(object);
 *
 * getter() === object;
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\create.js":[function(require,module,exports){
var baseAssign = require('./_baseAssign'),
    baseCreate = require('./_baseCreate');

/**
 * Creates an object that inherits from the `prototype` object. If a
 * `properties` object is given, its own enumerable string keyed properties
 * are assigned to the created object.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Object
 * @param {Object} prototype The object to inherit from.
 * @param {Object} [properties] The properties to assign to the object.
 * @returns {Object} Returns the new object.
 * @example
 *
 * function Shape() {
 *   this.x = 0;
 *   this.y = 0;
 * }
 *
 * function Circle() {
 *   Shape.call(this);
 * }
 *
 * Circle.prototype = _.create(Shape.prototype, {
 *   'constructor': Circle
 * });
 *
 * var circle = new Circle;
 * circle instanceof Circle;
 * // => true
 *
 * circle instanceof Shape;
 * // => true
 */
function create(prototype, properties) {
  var result = baseCreate(prototype);
  return properties ? baseAssign(result, properties) : result;
}

module.exports = create;

},{"./_baseAssign":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseAssign.js","./_baseCreate":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseCreate.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\eq.js":[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'user': 'fred' };
 * var other = { 'user': 'fred' };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\every.js":[function(require,module,exports){
var arrayEvery = require('./_arrayEvery'),
    baseEvery = require('./_baseEvery'),
    baseIteratee = require('./_baseIteratee'),
    isArray = require('./isArray'),
    isIterateeCall = require('./_isIterateeCall');

/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Array|Function|Object|string} [predicate=_.identity]
 *  The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.every(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.every(users, 'active');
 * // => false
 */
function every(collection, predicate, guard) {
  var func = isArray(collection) ? arrayEvery : baseEvery;
  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = every;

},{"./_arrayEvery":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_arrayEvery.js","./_baseEvery":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseEvery.js","./_baseIteratee":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseIteratee.js","./_isIterateeCall":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isIterateeCall.js","./isArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArray.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\get.js":[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is used in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

},{"./_baseGet":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseGet.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\hasIn.js":[function(require,module,exports){
var baseHasIn = require('./_baseHasIn'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

},{"./_baseHasIn":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseHasIn.js","./_hasPath":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_hasPath.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\identity.js":[function(require,module,exports){
/**
 * This method returns the first argument given to it.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'user': 'fred' };
 *
 * _.identity(object) === object;
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArguments.js":[function(require,module,exports){
var isArrayLikeObject = require('./isArrayLikeObject');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

module.exports = isArguments;

},{"./isArrayLikeObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArrayLikeObject.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArray.js":[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @type {Function}
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified,
 *  else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArrayLike.js":[function(require,module,exports){
var getLength = require('./_getLength'),
    isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(getLength(value)) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./_getLength":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getLength.js","./isFunction":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isFunction.js","./isLength":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isLength.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArrayLikeObject.js":[function(require,module,exports){
var isArrayLike = require('./isArrayLike'),
    isObjectLike = require('./isObjectLike');

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

},{"./isArrayLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArrayLike.js","./isObjectLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObjectLike.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isBuffer.js":[function(require,module,exports){
var constant = require('./constant'),
    root = require('./_root');

/** Used to determine if values are of the language type `Object`. */
var objectTypes = {
  'function': true,
  'object': true
};

/** Detect free variable `exports`. */
var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
  ? exports
  : undefined;

/** Detect free variable `module`. */
var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
  ? module
  : undefined;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = (freeModule && freeModule.exports === freeExports)
  ? freeExports
  : undefined;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = !Buffer ? constant(false) : function(value) {
  return value instanceof Buffer;
};

module.exports = isBuffer;

},{"./_root":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_root.js","./constant":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\constant.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isEmpty.js":[function(require,module,exports){
var getTag = require('./_getTag'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLike = require('./isArrayLike'),
    isBuffer = require('./isBuffer'),
    isFunction = require('./isFunction'),
    isObjectLike = require('./isObjectLike'),
    isString = require('./isString'),
    keys = require('./keys');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (isArrayLike(value) &&
      (isArray(value) || isString(value) || isFunction(value.splice) ||
        isArguments(value) || isBuffer(value))) {
    return !value.length;
  }
  if (isObjectLike(value)) {
    var tag = getTag(value);
    if (tag == mapTag || tag == setTag) {
      return !value.size;
    }
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return !(nonEnumShadows && keys(value).length);
}

module.exports = isEmpty;

},{"./_getTag":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_getTag.js","./isArguments":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArguments.js","./isArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArray.js","./isArrayLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArrayLike.js","./isBuffer":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isBuffer.js","./isFunction":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isFunction.js","./isObjectLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObjectLike.js","./isString":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isString.js","./keys":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\keys.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isFunction.js":[function(require,module,exports){
var isObject = require('./isObject');

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified,
 *  else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8 which returns 'object' for typed array and weak map constructors,
  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

module.exports = isFunction;

},{"./isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isLength.js":[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length,
 *  else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isNative.js":[function(require,module,exports){
var isFunction = require('./isFunction'),
    isHostObject = require('./_isHostObject'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = Function.prototype.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * Checks if `value` is a native function.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (!isObject(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = isNative;

},{"./_isHostObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isHostObject.js","./_toSource":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_toSource.js","./isFunction":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isFunction.js","./isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js":[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObjectLike.js":[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isString.js":[function(require,module,exports){
var isArray = require('./isArray'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var stringTag = '[object String]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified,
 *  else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
}

module.exports = isString;

},{"./isArray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArray.js","./isObjectLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObjectLike.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isSymbol.js":[function(require,module,exports){
var isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified,
 *  else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

module.exports = isSymbol;

},{"./isObjectLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObjectLike.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isTypedArray.js":[function(require,module,exports){
var isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified,
 *  else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
function isTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

module.exports = isTypedArray;

},{"./isLength":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isLength.js","./isObjectLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObjectLike.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\keys.js":[function(require,module,exports){
var baseHas = require('./_baseHas'),
    baseKeys = require('./_baseKeys'),
    indexKeys = require('./_indexKeys'),
    isArrayLike = require('./isArrayLike'),
    isIndex = require('./_isIndex'),
    isPrototype = require('./_isPrototype');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  var isProto = isPrototype(object);
  if (!(isProto || isArrayLike(object))) {
    return baseKeys(object);
  }
  var indexes = indexKeys(object),
      skipIndexes = !!indexes,
      result = indexes || [],
      length = result.length;

  for (var key in object) {
    if (baseHas(object, key) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
        !(isProto && key == 'constructor')) {
      result.push(key);
    }
  }
  return result;
}

module.exports = keys;

},{"./_baseHas":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseHas.js","./_baseKeys":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseKeys.js","./_indexKeys":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_indexKeys.js","./_isIndex":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isIndex.js","./_isPrototype":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isPrototype.js","./isArrayLike":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isArrayLike.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\memoize.js":[function(require,module,exports){
var MapCache = require('./_MapCache');

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

module.exports = memoize;

},{"./_MapCache":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_MapCache.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\property.js":[function(require,module,exports){
var baseProperty = require('./_baseProperty'),
    basePropertyDeep = require('./_basePropertyDeep'),
    isKey = require('./_isKey'),
    toKey = require('./_toKey');

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

},{"./_baseProperty":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseProperty.js","./_basePropertyDeep":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_basePropertyDeep.js","./_isKey":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_isKey.js","./_toKey":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_toKey.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\rest.js":[function(require,module,exports){
var apply = require('./_apply'),
    toInteger = require('./toInteger');

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates a function that invokes `func` with the `this` binding of the
 * created function and arguments from `start` and beyond provided as
 * an array.
 *
 * **Note:** This method is based on the
 * [rest parameter](https://mdn.io/rest_parameters).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Function
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.rest(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
 *
 * say('hello', 'fred', 'barney', 'pebbles');
 * // => 'hello fred, barney, & pebbles'
 */
function rest(func, start) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    switch (start) {
      case 0: return func.call(this, array);
      case 1: return func.call(this, args[0], array);
      case 2: return func.call(this, args[0], args[1], array);
    }
    var otherArgs = Array(start + 1);
    index = -1;
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

module.exports = rest;

},{"./_apply":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_apply.js","./toInteger":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\toInteger.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\toFinite.js":[function(require,module,exports){
var toNumber = require('./toNumber');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

},{"./toNumber":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\toNumber.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\toInteger.js":[function(require,module,exports){
var toFinite = require('./toFinite');

/**
 * Converts `value` to an integer.
 *
 * **Note:** This function is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;

},{"./toFinite":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\toFinite.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\toNumber.js":[function(require,module,exports){
var isFunction = require('./isFunction'),
    isObject = require('./isObject'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = isFunction(value.valueOf) ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;

},{"./isFunction":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isFunction.js","./isObject":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isObject.js","./isSymbol":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\isSymbol.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\toPairs.js":[function(require,module,exports){
var createToPairs = require('./_createToPairs'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable string keyed-value pairs for `object`
 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
 * entries are returned.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias entries
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the key-value pairs.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.toPairs(new Foo);
 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
 */
var toPairs = createToPairs(keys);

module.exports = toPairs;

},{"./_createToPairs":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_createToPairs.js","./keys":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\keys.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\toString.js":[function(require,module,exports){
var baseToString = require('./_baseToString');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

},{"./_baseToString":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\node_modules\\xml2js\\node_modules\\xmlbuilder\\node_modules\\lodash\\_baseToString.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\index.js":[function(require,module,exports){
module.exports = {
	PanelManager : require('./src/PanelManager'),
	Panel: require('./src/Panel'),
	BaseTransition: require('./src/transition/BaseTransition'),
	ShowTransitionMovement: require('./src/transition/show/ShowTransitionMovement'),
	ShowTransitionAlphaAndMovement: require('./src/transition/show/ShowTransitionAlphaAndMovement'),
	ShowTransitionAlpha: require('./src/transition/show/ShowTransitionAlpha'),
	HideTransitionMovement: require('./src/transition/hide/HideTransitionMovement')

};

},{"./src/Panel":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\Panel.js","./src/PanelManager":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\PanelManager.js","./src/transition/BaseTransition":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\BaseTransition.js","./src/transition/hide/HideTransitionMovement":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\hide\\HideTransitionMovement.js","./src/transition/show/ShowTransitionAlpha":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\show\\ShowTransitionAlpha.js","./src/transition/show/ShowTransitionAlphaAndMovement":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\show\\ShowTransitionAlphaAndMovement.js","./src/transition/show/ShowTransitionMovement":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\show\\ShowTransitionMovement.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\Panel.js":[function(require,module,exports){
/**
 * Created by JIocb on 2/3/2016.
 */

var ShowTransition = require('./transition/show/ShowTransitionMovement');
var HideTransition = require('./transition/hide/HideTransitionMovement');

var Panel = function (game,guiBuilder)
{
    'use strict';
    Phaser.Group.call(this, game, null);
    this._game = game;
    this._guiBuilder = guiBuilder;
    this.signal = new Phaser.Signal();

};

// ========== Prototype =========
Panel.prototype = Object.create(Phaser.Group.prototype);
Panel.prototype.constructor = Panel;
module.exports = Panel;


Panel.prototype.build = function() {
    'use strict';
};

Panel.prototype.onClosed = function() {
    'use strict';

    this.signal.dispatch(this,'pressClose');
};

Panel.prototype.reset = function() {
    'use strict';

    this._data = null;

    if (this._showTransition)
    {
        this._showTransition.destroy();
        this._showTransition = null;
    }

    if(this._hideTransition)
    {
        this._hideTransition.destroy();
        this._hideTransition = null;
    }
};

Panel.prototype.initialize = function(aspectRatio,data) {
    'use strict';
    this._data = data;
    this._aspectRatio = aspectRatio || 'landscape';
    this.build();
};

Panel.prototype.resize = function(aspectRatio) {
    'use strict';

    if(this._aspectRatio !== aspectRatio)
    {
        this._aspectRatio = aspectRatio;
        this.changeAspectRatio();
    }
};

Panel.prototype.changeAspectRatio = function() {
    'use strict';
    this.reset();
    this.build();
};

Panel.prototype.createShowTransition = function() {
    'use strict';
    return new ShowTransition(this._game, this, 0, -3000, 0, 0, 250, Phaser.Easing.Linear.None);
};

Panel.prototype.createHideTransition = function() {
    'use strict';
    return new HideTransition(this._game, this, this.x, this.y - 3000, 250, Phaser.Easing.Linear.None);
};

Panel.prototype.open = function() {
    'use strict';
    this.visible = true;
    this._showTransition = this.createShowTransition();
    this._showTransition.start(this.onShowed,this);
};

Panel.prototype.onShowed = function() {
    'use strict';

    this._showTransition.destroy();
    this._showTransition = null;
};


Panel.prototype.close = function() {
    'use strict';
    this._hideTransition = this.createHideTransition();
    this._hideTransition.start(this.onHided,this);
};

Panel.prototype.onHided = function() {
    'use strict';
    this.visible = false;
    this._hideTransition.destroy();
    this._hideTransition = null;
    this.signal.dispatch(this,'hided');
};


Panel.prototype.destroy = function() {
    'use strict';

    this.reset();
    this._guiBuilder = null;
    this._game = null;
    this.signal.removeAll();
    this.signal = null;
    this._name = null;
};

},{"./transition/hide/HideTransitionMovement":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\hide\\HideTransitionMovement.js","./transition/show/ShowTransitionMovement":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\show\\ShowTransitionMovement.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\PanelManager.js":[function(require,module,exports){
/**
 * Created by JIocb on 2/3/2016.
 */

var PanelManager = function (game,guiBuilder,aspectRatio)
{
    'use strict';

    this._game = game;
    this._guiBuilder = guiBuilder;
    this._classByKey = {};
    this._currentPanels = {};
    this._aspectRatio = aspectRatio;

};

// ========== Prototype =========
PanelManager.prototype = Object.create(Object.prototype);
PanelManager.prototype.constructor = PanelManager;
module.exports = PanelManager;

PanelManager.prototype.setRoot = function(container) {
    'use strict';
    this._boardContainer = container;

};

PanelManager.prototype.registerPanel = function(panelName, panelClass) {
    'use strict';
    this._classByKey[panelName] = panelClass;

};

PanelManager.prototype.open = function(panelName,data) {
    'use strict';

    var panel = this._currentPanels[panelName];
    if(panel)
    {
        panel.reset();
        this._boardContainer.addChild(panel);
        panel.initialize(this._aspectRatio,data);
        panel.open();
        this._currentPanels[panelName]  = panel;
        return panel;
    }

    var cl = this._classByKey[panelName];
    panel = new cl(this._game,this._guiBuilder);
    this._boardContainer.addChild(panel);
    panel.initialize(this._aspectRatio,data);
    panel.open();
    this._currentPanels[panelName]  = panel;
    return panel;
};

PanelManager.prototype.close = function(panelName) {
    'use strict';

    var panel = this._currentPanels[panelName];

    if(panel)
    {
        panel.close();
    }

    return panel;
};

PanelManager.prototype.resize = function(aspectRatio) {
    'use strict';

    this._aspectRatio = aspectRatio;

    for(var key in this._currentPanels)
    {
        if(this._currentPanels.hasOwnProperty(key)) {
            var panel = this._currentPanels[key];

            if (panel != null && panel.parent) {
                panel.resize(this._aspectRatio);
            }
        }
    }

};

/*
PanelManager.prototype.onPanelEvent = function(panel,eventname) {
    'use strict';
    console.log('onClosePanelEvent',eventname,panel);
    if(eventname == 'pressClose')
    {
        panel.close();
    }
    else if(eventname === 'hided')
    {
        console.log("REMOVED PANEL")
        this._boardContainer.removeChild(panel);
        delete(this._currentPanels[panel.name]);
        panel.reset();
    }
};
*/

PanelManager.prototype.destroy = function() {
    'use strict';

    console.log("Destroy")

    for(var key in this._currentPanels)
    {
        if(this._currentPanels.hasOwnProperty(key)) {
            var panel = this._currentPanels[key];

            if (panel != null && panel.parent) {
                panel.destroy();
                this._boardContainer.removeChild(panel)
            }
        }
    }

    this._aspectRatio = null;
    this._classByKey = null;
    this._currentPanels = null;

    this._boardContainer = null;
    this._game = null;
    this._guiBuilder = null;

};
},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\BaseTransition.js":[function(require,module,exports){
/**
 * Created by JIocb on 2/4/2016.
 */
var BaseTransition = function (game,panel)
{
    "use strict";
    this._game = game;
    this._panel = panel;

};

// ========== Prototype =========
BaseTransition.prototype = Object.create(Object.prototype);
BaseTransition.prototype.constructor = BaseTransition;
module.exports = BaseTransition;

BaseTransition.prototype.start = function(callBack,callBackContext)
{
    this._callBack = callBack;
    this._callBackContext = callBackContext;

    if(this._callBack && this._callBackContext)
    {
        this._callBack.call(this._callBackContext);
    }
};


BaseTransition.prototype.destroy = function()
{
    this._callBack = null;
    this._callBackContext = null;

};
},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\hide\\HideTransitionMovement.js":[function(require,module,exports){
/**
 * Created by JIocb on 2/4/2016.
 */
var BaseTransition = require('./../BaseTransition');

var HideTransitionMovement = function (game, panel, toX, toY, timeInMsc, easing)
{
    'use strict';
    BaseTransition.call(this, game,panel);
    this._toX = toX;
    this._toY = toY;
    this._timeInMsc = timeInMsc || 100;
    this._easing = easing || Phaser.Easing.Linear.None;
};

// ========== Prototype =========
HideTransitionMovement.prototype = Object.create(BaseTransition);
HideTransitionMovement.prototype.constructor = HideTransitionMovement;
module.exports = HideTransitionMovement;


HideTransitionMovement.prototype.start = function(callBack,callBackContext)
{
    'use strict';
    this._callBack = callBack;
    this._callBackContext = callBackContext;

    this._tween = this._game.add.tween(this._panel);
    this._tween.onComplete.add(this._callBack,this._callBackContext);
    this._tween.to({ x : this._toX, y : this._toY}, this._timeInMsc, this._easing);
    this._tween.start();
};


HideTransitionMovement.prototype.destroy = function()
{
    'use strict';
    this._callBack = null;
    this._callBackContext = null;
    if(this._tween)
    {
        this._tween.pause();
    }
    this._game.tweens.remove(this._tween);
};


},{"./../BaseTransition":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\BaseTransition.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\show\\ShowTransitionAlpha.js":[function(require,module,exports){
/**
 * Created by jedi on 24-Feb-16.
 */

var BaseTransition = require('./../BaseTransition');
var ShowTransitionAlpha = function (game, panel, fromAlpha, toAlpha, timeInMsc, easing)
{
    'use strict';
    BaseTransition.call(this, game,panel);
    this._fromAlpha = fromAlpha;
    this._toAlpha = toAlpha;
    this._timeInMsc = timeInMsc || 100;
    this._easing = easing || Phaser.Easing.Linear.None;
};

// ========== Prototype =========
ShowTransitionAlpha.prototype = Object.create(BaseTransition);
ShowTransitionAlpha.prototype.constructor = ShowTransitionAlpha;
module.exports = ShowTransitionAlpha;


ShowTransitionAlpha.prototype.start = function(callBack, callBackContext) {
    'use strict';
    this._callBack = callBack;
    this._callBackContext = callBackContext;

    this._tween = this._game.add.tween(this._panel);
    this._tween.onComplete.add(this._callBack, this._callBackContext);
    this._panel.alpha = this._fromAlpha;
    this._tween.to({ alpha : this._toAlpha}, this._timeInMsc, this._easing);
    this._tween.start();
};


ShowTransitionAlpha.prototype.destroy = function()
{
    'use strict';
    this._callBack = null;
    this._callBackContext = null;
    if(this._tween)
    {
        this._tween.pause();
    }
    this._game.tweens.remove(this._tween);
};


},{"./../BaseTransition":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\BaseTransition.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\show\\ShowTransitionAlphaAndMovement.js":[function(require,module,exports){
/**
 * Created by jedi on 28-Feb-16.
 */

var BaseTransition = require('./../BaseTransition');
var ShowTransitionAlphaAndMovement = function (game, panel, fromX, fromY, toX, toY, fromAlpha, toAlpha, timeInMsc, easing)
{
    'use strict';
    BaseTransition.call(this, game,panel);
    this._fromX = fromX;
    this._fromY = fromY;
    this._toX = toX;
    this._toY = toY;
    this._fromAlpha = fromAlpha;
    this._toAlpha = toAlpha;
    this._timeInMsc = timeInMsc || 100;
    this._easing = easing || Phaser.Easing.Linear.None;
};

// ========== Prototype =========
ShowTransitionAlphaAndMovement.prototype = Object.create(BaseTransition);
ShowTransitionAlphaAndMovement.prototype.constructor = ShowTransitionAlphaAndMovement;
module.exports = ShowTransitionAlphaAndMovement;


ShowTransitionAlphaAndMovement.prototype.start = function(callBack, callBackContext) {
    'use strict';
    this._callBack = callBack;
    this._callBackContext = callBackContext;

    this._tween = this._game.add.tween(this._panel);
    this._tween.onComplete.add(this._callBack, this._callBackContext);
    this._panel.x = this._fromX;
    this._panel.y = this._fromY;
    this._panel.alpha = this._fromAlpha;
    this._tween.to({ x : this._toX, y : this._toY, alpha : this._toAlpha}, this._timeInMsc, this._easing);
    this._tween.start();

};


ShowTransitionAlphaAndMovement.prototype.destroy = function()
{
    'use strict';
    this._callBack = null;
    this._callBackContext = null;
    if(this._tween)
    {
        this._tween.pause();
    }
    this._game.tweens.remove(this._tween);
};


},{"./../BaseTransition":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\BaseTransition.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\show\\ShowTransitionMovement.js":[function(require,module,exports){
/**
 * Created by JIocb on 2/4/2016.
 */
var BaseTransition = require('./../BaseTransition');
var ShowTransitionMovement = function (game, panel, fromX, fromY, toX, toY, timeInMsc, easing)
{
    'use strict';
    BaseTransition.call(this, game,panel);
    this._fromX = fromX;
    this._fromY = fromY;
    this._toX = toX;
    this._toY = toY;
    this._timeInMsc = timeInMsc || 100;
    this._easing = easing || Phaser.Easing.Linear.None;
};

// ========== Prototype =========
ShowTransitionMovement.prototype = Object.create(BaseTransition);
ShowTransitionMovement.prototype.constructor = ShowTransitionMovement;
module.exports = ShowTransitionMovement;


ShowTransitionMovement.prototype.start = function(callBack, callBackContext) {
    'use strict';
    this._callBack = callBack;
    this._callBackContext = callBackContext;
    this._panel.y = this._fromY;
    this._panel.x = this._fromX;

    this._tween = this._game.add.tween(this._panel);
    this._tween.onComplete.add(this._callBack, this._callBackContext);
    this._panel.x = this._fromX;
    this._panel.y = this._fromY;
    this._tween.to({ x : this._toX, y : this._toY}, this._timeInMsc, this._easing);
    this._tween.start();

};


ShowTransitionMovement.prototype.destroy = function()
{
    'use strict';
    this._callBack = null;
    this._callBackContext = null;
    if(this._tween)
    {
        this._tween.pause();
    }
    this._game.tweens.remove(this._tween);
};

},{"./../BaseTransition":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\src\\transition\\BaseTransition.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\browser-resolve\\empty.js":[function(require,module,exports){

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\index.js":[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; i++) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  that.write(string, encoding)
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

function arrayIndexOf (arr, val, byteOffset, encoding) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var foundIndex = -1
  for (var i = 0; byteOffset + i < arrLength; i++) {
    if (read(arr, byteOffset + i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
      if (foundIndex === -1) foundIndex = i
      if (i - foundIndex + 1 === valLength) return (byteOffset + foundIndex) * indexSize
    } else {
      if (foundIndex !== -1) i -= i - foundIndex
      foundIndex = -1
    }
  }
  return -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  if (Buffer.isBuffer(val)) {
    // special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(this, val, byteOffset, encoding)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset, encoding)
  }

  throw new TypeError('val must be string, number or Buffer')
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; i++) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; i++) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\node_modules\\base64-js\\lib\\b64.js","ieee754":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\node_modules\\ieee754\\index.js","isarray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\node_modules\\isarray\\index.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\node_modules\\base64-js\\lib\\b64.js":[function(require,module,exports){
'use strict'

exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

function init () {
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i]
    revLookup[code.charCodeAt(i)] = i
  }

  revLookup['-'.charCodeAt(0)] = 62
  revLookup['_'.charCodeAt(0)] = 63
}

init()

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\node_modules\\ieee754\\index.js":[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\node_modules\\isarray\\index.js":[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\events\\events.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\inherits\\inherits_browser.js":[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\insert-module-globals\\node_modules\\is-buffer\\index.js":[function(require,module,exports){
/**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */

module.exports = function (obj) {
  return !!(obj != null &&
    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)
      (obj.constructor &&
      typeof obj.constructor.isBuffer === 'function' &&
      obj.constructor.isBuffer(obj))
    ))
}

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\process\\browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\duplex.js":[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_duplex.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_duplex.js":[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_readable.js","./_stream_writable":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_writable.js","core-util-is":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\core-util-is\\lib\\util.js","inherits":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\inherits\\inherits_browser.js","process-nextick-args":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\process-nextick-args\\index.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_passthrough.js":[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_transform.js","core-util-is":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\core-util-is\\lib\\util.js","inherits":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\inherits\\inherits_browser.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_readable.js":[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

var hasPrependListener = typeof EE.prototype.prependListener === 'function';

function prependListener(emitter, event, fn) {
  if (hasPrependListener) return emitter.prependListener(event, fn);

  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS. This is here
  // only because this code needs to continue to work with older versions
  // of Node.js that do not include the prependListener() method. The goal
  // is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

var Duplex;
function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

var Duplex;
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = bufferShim.from(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');
      stream.emit('error', _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended) return 0;

  if (state.objectMode) return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
  }

  if (n <= 0) return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended) state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var _i = 0; _i < len; _i++) {
      dests[_i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1) return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && !this._readableState.endEmitted) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0) return null;

  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode) ret = '';else ret = bufferShim.allocUnsafe(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var _buf = list[0];
        var cpy = Math.min(n - c, _buf.length);

        if (stringMode) ret += _buf.slice(0, cpy);else _buf.copy(ret, c, 0, cpy);

        if (cpy < _buf.length) list[0] = _buf.slice(cpy);else list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'))

},{"./_stream_duplex":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_duplex.js","_process":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\process\\browser.js","buffer":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\index.js","buffer-shims":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\buffer-shims\\index.js","core-util-is":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\core-util-is\\lib\\util.js","events":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\events\\events.js","inherits":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\inherits\\inherits_browser.js","isarray":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\isarray\\index.js","process-nextick-args":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\process-nextick-args\\index.js","string_decoder/":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\string_decoder\\index.js","util":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\browser-resolve\\empty.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_transform.js":[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er) {
      done(stream, er);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('Not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er) {
  if (er) return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_duplex.js","core-util-is":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\core-util-is\\lib\\util.js","inherits":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\inherits\\inherits_browser.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_writable.js":[function(require,module,exports){
(function (process){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

var Duplex;
function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

var Duplex;
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  // Always throw error if a null is written
  // if we are not in object mode then throw
  // if it is not a buffer, string, or undefined.
  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = bufferShim.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
        afterWrite(stream, state, finished, cb);
      }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
}).call(this,require('_process'))

},{"./_stream_duplex":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_duplex.js","_process":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\process\\browser.js","buffer":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\index.js","buffer-shims":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\buffer-shims\\index.js","core-util-is":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\core-util-is\\lib\\util.js","events":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\events\\events.js","inherits":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\inherits\\inherits_browser.js","process-nextick-args":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\process-nextick-args\\index.js","util-deprecate":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\util-deprecate\\browser.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\buffer-shims\\index.js":[function(require,module,exports){
(function (global){
'use strict';

var buffer = require('buffer');
var Buffer = buffer.Buffer;
var SlowBuffer = buffer.SlowBuffer;
var MAX_LEN = buffer.kMaxLength || 2147483647;
exports.alloc = function alloc(size, fill, encoding) {
  if (typeof Buffer.alloc === 'function') {
    return Buffer.alloc(size, fill, encoding);
  }
  if (typeof encoding === 'number') {
    throw new TypeError('encoding must not be number');
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  var enc = encoding;
  var _fill = fill;
  if (_fill === undefined) {
    enc = undefined;
    _fill = 0;
  }
  var buf = new Buffer(size);
  if (typeof _fill === 'string') {
    var fillBuf = new Buffer(_fill, enc);
    var flen = fillBuf.length;
    var i = -1;
    while (++i < size) {
      buf[i] = fillBuf[i % flen];
    }
  } else {
    buf.fill(_fill);
  }
  return buf;
}
exports.allocUnsafe = function allocUnsafe(size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    return Buffer.allocUnsafe(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new Buffer(size);
}
exports.from = function from(value, encodingOrOffset, length) {
  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
    return Buffer.from(value, encodingOrOffset, length);
  }
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof value === 'string') {
    return new Buffer(value, encodingOrOffset);
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    var offset = encodingOrOffset;
    if (arguments.length === 1) {
      return new Buffer(value);
    }
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    var len = length;
    if (typeof len === 'undefined') {
      len = value.byteLength - offset;
    }
    if (offset >= value.byteLength) {
      throw new RangeError('\'offset\' is out of bounds');
    }
    if (len > value.byteLength - offset) {
      throw new RangeError('\'length\' is out of bounds');
    }
    return new Buffer(value.slice(offset, offset + len));
  }
  if (Buffer.isBuffer(value)) {
    var out = new Buffer(value.length);
    value.copy(out, 0, 0, value.length);
    return out;
  }
  if (value) {
    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
      return new Buffer(value);
    }
    if (value.type === 'Buffer' && Array.isArray(value.data)) {
      return new Buffer(value.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
}
exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
  if (typeof Buffer.allocUnsafeSlow === 'function') {
    return Buffer.allocUnsafeSlow(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size >= MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new SlowBuffer(size);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"buffer":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\index.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\core-util-is\\lib\\util.js":[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../../../insert-module-globals/node_modules/is-buffer/index.js")})

},{"../../../../insert-module-globals/node_modules/is-buffer/index.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\insert-module-globals\\node_modules\\is-buffer\\index.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\isarray\\index.js":[function(require,module,exports){
arguments[4]["e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\node_modules\\isarray\\index.js"][0].apply(exports,arguments)
},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\process-nextick-args\\index.js":[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))

},{"_process":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\process\\browser.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\node_modules\\util-deprecate\\browser.js":[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\passthrough.js":[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_passthrough.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\readable.js":[function(require,module,exports){
(function (process){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
  module.exports = Stream;
}

}).call(this,require('_process'))

},{"./lib/_stream_duplex.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_duplex.js","./lib/_stream_passthrough.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_passthrough.js","./lib/_stream_readable.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_readable.js","./lib/_stream_transform.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_transform.js","./lib/_stream_writable.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_writable.js","_process":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\process\\browser.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\transform.js":[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_transform.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\writable.js":[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\lib\\_stream_writable.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\stream-browserify\\index.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\events\\events.js","inherits":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\inherits\\inherits_browser.js","readable-stream/duplex.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\duplex.js","readable-stream/passthrough.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\passthrough.js","readable-stream/readable.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\readable.js","readable-stream/transform.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\transform.js","readable-stream/writable.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\readable-stream\\writable.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\string_decoder\\index.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\buffer\\index.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\timers-browserify\\main.js":[function(require,module,exports){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
},{"process/browser.js":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\browserify\\node_modules\\process\\browser.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\xmlserializer\\lib\\serializer.js":[function(require,module,exports){
var removeInvalidCharacters = function (content) {
    // See http://www.w3.org/TR/xml/#NT-Char for valid XML 1.0 characters
    return content.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F]/g, '');
};

var serializeAttributeValue = function (value) {
    return value
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&apos;');
};

var serializeTextContent = function (content) {
    return content
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
};

var serializeAttribute = function (attr) {
    var value = attr.value;

    return ' ' + attr.name + '="' + serializeAttributeValue(value) + '"';
};

var getTagName = function (node) {
    var tagName = node.tagName;

    // Aid in serializing of original HTML documents
    if (node.namespaceURI === 'http://www.w3.org/1999/xhtml') {
        tagName = tagName.toLowerCase();
    }
    return tagName;
};

var serializeNamespace = function (node) {
    var nodeHasXmlnsAttr = Array.prototype.map.call(node.attributes || node.attrs, function (attr) {
            return attr.name;
        })
        .indexOf('xmlns') >= 0;
    // Serialize the namespace as an xmlns attribute whenever the element
    // doesn't already have one and the inherited namespace does not match
    // the element's namespace.
    // As a special case, always include an xmlns for html elements, in case
    // of broken namespaceURI handling by browsers.
    if (!nodeHasXmlnsAttr &&
            (!node.parentNode ||
             node.namespaceURI !== node.parentNode.namespaceURI ||
             getTagName(node) === 'html')) {
         return ' xmlns="' + node.namespaceURI + '"';
    } else {
        return '';
    }
};

var serializeChildren = function (node) {
    return Array.prototype.map.call(node.childNodes, function (childNode) {
        return nodeTreeToXHTML(childNode);
    }).join('');
};

var serializeTag = function (node) {
    var output = '<' + getTagName(node);
    output += serializeNamespace(node);

    Array.prototype.forEach.call(node.attributes || node.attrs, function (attr) {
        output += serializeAttribute(attr);
    });

    if (node.childNodes.length > 0) {
        output += '>';
        output += serializeChildren(node);
        output += '</' + getTagName(node) + '>';
    } else {
        output += '/>';
    }
    return output;
};

var serializeText = function (node) {
    var text = node.nodeValue || node.value || '';
    return serializeTextContent(text);
};

var serializeComment = function (node) {
    return '<!--' +
        node.data
            .replace(/-/g, '&#45;') +
        '-->';
};

var serializeCDATA = function (node) {
    return '<![CDATA[' + node.nodeValue + ']]>';
};

var nodeTreeToXHTML = function (node) {
    if (node.nodeName === '#document' ||
        node.nodeName === '#document-fragment') {
        return serializeChildren(node);
    } else {
        if (node.tagName) {
            return serializeTag(node);
        } else if (node.nodeName === '#text') {
            return serializeText(node);
        } else if (node.nodeName === '#comment') {
            return serializeComment(node);
        } else if (node.nodeName === '#cdata-section') {
            return serializeCDATA(node);
        }
    }
};

exports.serializeToString = function (document) {
    return removeInvalidCharacters(nodeTreeToXHTML(document));
};

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\GameSettings.js":[function(require,module,exports){
/**
 * Created by Stas on 1/16/2015.
 */


// ========================= Construction =========================
/**
 * Contains game option, meant to be used as singleton
 * @type {{alphabet: string}}
 */
var GameSettings = {
    // Fonts
    lightFont: "Gotham-Light",
    mediumFont: "Gotham-Medium",

    // Atlases
    gameAtlas: "gameAtlas",
    uiAtlas: "uiAtlas",
    assetScale: 1,

    // Device variables (settings that are affected by specific devices)
    currentDevice: 0,
    animatePopups: true, // play popup tweens if running in WebGL, but not in canvas
    cullListItems: false, // manually cull list items if the device doesn't support masking

    // Game variables
    wereOptionsChanged: false,

    // App variables
    version: "0.01",
    DEBUG: true
};
module.exports = GameSettings;

// ========================= Sizes =========================
GameSettings.Sizes = {
    small: "small",
    medium: "medium",
    large: "large"
};
Object.freeze(GameSettings.Sizes);

GameSettings.AssetScales = {
    small: 0.6,
    medium: 0.8,
    large: 1
};
Object.freeze(GameSettings.AssetScales);

GameSettings.setAssetSizeMultiplier = function (game) {
    "use strict";
    game.scale.setMaximum();
    game.scale.refresh();
    game.scale.boot();
    GameSettings.assetScale = GameSettings.AssetScales.large;

    var minSideLength = Math.min(game.scale.width, game.scale.height);
    if(minSideLength > 900){
        GameSettings.assetScale = GameSettings.AssetScales.large;
    }
    else if(minSideLength>600){
        GameSettings.assetScale = GameSettings.AssetScales.medium;
    }
    else {
        GameSettings.assetScale = GameSettings.AssetScales.small;
    }
    console.log("GameSettings.setAssetSizeMultiplier()", game.width, game.height, GameSettings.assetScale);
};

// ========================= Options =========================
GameSettings.Options = {
    showTimer: true
};

GameSettings.loadOptions = function () {
    "use strict";
    if (typeof(Storage) !== "undefined") {
        var loadedOptions = localStorage.getItem("GameSettings.Options");
        if (loadedOptions != null) {
            GameSettings.Options = JSON.parse(loadedOptions);
        }
    }
};

GameSettings.saveOptions = function () {
    "use strict";
    if (typeof(Storage) !== "undefined") {
        try {
            localStorage.setItem("GameSettings.Options", JSON.stringify(GameSettings.Options));
        }
        catch(error) {
            console.log("GameSettings.saveOptions()", error.message);
        }
    }
};


// ========================= Enums =========================
GameSettings.PopupStates = {
    hidden: 0, // Popup is not shown
    appearing: 1, // Popup is playing a tween-in animation
    visible: 2, // Popup is shown onscreen
    disappearing: 3 // Popup is playing a tween-out animation, returns to Hidden state afterwards
};
Object.freeze(GameSettings.PopupStates);

GameSettings.OptionsItems = {
    Help: 3,
    ExitPuzzle: 5
};
Object.freeze(GameSettings.OptionsItems);

GameSettings.EndGameReason = {
    Completed: "Game Completed",
    Quit: "Quit"
};
Object.freeze(GameSettings.EndGameReason);

GameSettings.InputPriorities = {
    Default: 0,
    Scrim: 1,
    Popups: 2,
    PopupItems: 3,
    Buttons: 4
};
Object.freeze(GameSettings.InputPriorities);

GameSettings.Devices = {
    Desktop: 0,
    Tablet: 1,
    Phone: 2
};
Object.freeze(GameSettings.Devices);

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\Plugins\\FPSMeter.js":[function(require,module,exports){
/**
 * A FPS meter Plugin that integrates statjs into phaser js behavior
 * you need https://github.com/mrdoob/stats.js/ in order to make this plugin work properly
 */
var Stats = require("./Stats");
Phaser.Plugin.FPSMeter = function (game, parent) {
    Phaser.Plugin.call(this, game, parent);
    this.enableStats();
};
// Extends the Phaser.Plugin template, setting up values we need
Phaser.Plugin.FPSMeter.prototype = Object.create(Phaser.Plugin.prototype);
Phaser.Plugin.FPSMeter.prototype.constructor = Phaser.Plugin.FPSMeter;
/**
 * This is run when the plugins update during the core game loop.
 */
Phaser.Plugin.FPSMeter.prototype.preUpdate = function () {
    this.Stats.begin();
};
Phaser.Plugin.FPSMeter.prototype.postUpdate = function () {
    this.Stats.end();
};
Phaser.Plugin.FPSMeter.prototype.enableStats = function(){
    this.Stats = new Stats();
    this.Stats.setMode(0); // 0: fps, 1: ms

    // align top-left
    this.Stats.domElement.style.position = 'absolute';
    this.Stats.domElement.style.left = '0px';
    this.Stats.domElement.style.top = '0px';
    document.body.appendChild( this.Stats.domElement );
};
module.exports = Phaser.Plugin.FPSMeter;
/**
 * Created by Stas on 12/1/2014.
 */

},{"./Stats":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\Plugins\\Stats.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\Plugins\\SaveCPU.js":[function(require,module,exports){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Ivanix Mobile LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/*
 * Plugin: SaveCPU
 * Author: Ivanix @ Ivanix Mobile LLC
 * Purpose:  Reduce CPU usage caused from redudant rendering
 *           on idle or static display scenes
 *           reduce fps for casual/puzzle games
 *
 *
 * Configurable Properties:
 *                
 * [renderOnFPS]   
 * Constrains maximum FPS to value set. 
 * Reasonable values from 0 to 60 
 * Default value 30
 * Set value to 0 disable rendering based on FPS
 * and use methods described below.
 *
 * [renderOnPointerChange]   
 * Render when pointer movement detected.
 * Possible values  "true" or "false"
 * Default: false
 * Note that renderOnFPS must be set to 0
 *
 *
 * Callable Methods:
 * 
 * [forceRender()]
 * Forces rendering during core game loop
 * Can be called independently or in tandem with above properties.
 * Should be called inside update function.
 *
 */

/*global
    Phaser: true,
    window: true
 */
/*jslint nomen: true */

Phaser.Plugin.SaveCPU = function (game, parent) {
    'use strict';

    Phaser.Plugin.call(this, game, parent);

};
Phaser.Plugin.SaveCPU.prototype = Object.create(Phaser.Plugin.prototype);
Phaser.Plugin.SaveCPU.constructor = Phaser.Plugin.SaveCPU;

Phaser.Plugin.SaveCPU.prototype.init = function () {
    'use strict';
    this.now = window.performance.now();
    this.renderType = this.game.renderType;

    // fps default
    this.renderOnFPS = 30;
    this.renderOnPointerChange = false;
    this.renderDirty = true;
};
Phaser.Plugin.SaveCPU.prototype.setRender = function () {
    'use strict';
    if (this.renderDirty) {
        this.game.renderType = this.renderType;
    } else {
        this.game.renderType = Phaser.HEADLESS;
    }
    this.renderDirty = false;
};
Phaser.Plugin.SaveCPU.prototype.forceRender = function () {
    'use strict';
    this.renderDirty = true;
};
Phaser.Plugin.SaveCPU.prototype.forceRenderOnPointerChange = function () {
    'use strict';
    
    var input = this.game.input;

    if (input.oldx !== input.x || input.oldy !== input.y) {
        this.forceRender();
        input.oldx = input.x;
        input.oldy = input.y;
    }
    if (input.oldDown !== input.activePointer.isDown) {
        this.forceRender();
        input.oldDown = input.activePointer.isDown;
    }
};
Phaser.Plugin.SaveCPU.prototype.forceRenderOnFPS = function () {
    'use strict';
    
    var ts, diff;

    ts = window.performance.now();
    diff = ts - this.now;
    if (diff < (1000 / this.renderOnFPS)) {
        return false;
    }
    this.now = ts;
    this.forceRender();
    return true;

};
Phaser.Plugin.SaveCPU.prototype.postUpdate = function () {
    'use strict';
    if (this.renderOnFPS && this.forceRenderOnFPS()) {
        this.setRender();
        return;
    }
    if (this.renderOnPointerChange && this.forceRenderOnPointerChange()) {
        this.setRender();
        return;
    }
    this.setRender();
};
Phaser.Plugin.SaveCPU.prototype.postRender = function () {
    'use strict';
    if (this.game._paused) {
        this.game.renderType = Phaser.HEADLESS;
    }
};
module.exports = Phaser.Plugin.SaveCPU;

},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\Plugins\\Stats.js":[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */

var Stats = function () {

	var startTime = Date.now(), prevTime = startTime;
	var ms = 0, msMin = Infinity, msMax = 0;
	var fps = 0, fpsMin = Infinity, fpsMax = 0;
	var frames = 0, mode = 0;

	var container = document.createElement( 'div' );
	container.id = 'stats';
	container.addEventListener( 'mousedown', function ( event ) { event.preventDefault(); setMode( ++ mode % 2 ) }, false );
	container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';

	var fpsDiv = document.createElement( 'div' );
	fpsDiv.id = 'fps';
	fpsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#002';
	container.appendChild( fpsDiv );

	var fpsText = document.createElement( 'div' );
	fpsText.id = 'fpsText';
	fpsText.style.cssText = 'color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';
	fpsText.innerHTML = 'FPS';
	fpsDiv.appendChild( fpsText );

	var fpsGraph = document.createElement( 'div' );
	fpsGraph.id = 'fpsGraph';
	fpsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0ff';
	fpsDiv.appendChild( fpsGraph );

	while ( fpsGraph.children.length < 74 ) {

		var bar = document.createElement( 'span' );
		bar.style.cssText = 'width:1px;height:30px;float:left;background-color:#113';
		fpsGraph.appendChild( bar );

	}

	var msDiv = document.createElement( 'div' );
	msDiv.id = 'ms';
	msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#020;display:none';
	container.appendChild( msDiv );

	var msText = document.createElement( 'div' );
	msText.id = 'msText';
	msText.style.cssText = 'color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';
	msText.innerHTML = 'MS';
	msDiv.appendChild( msText );

	var msGraph = document.createElement( 'div' );
	msGraph.id = 'msGraph';
	msGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0f0';
	msDiv.appendChild( msGraph );

	while ( msGraph.children.length < 74 ) {

		var bar = document.createElement( 'span' );
		bar.style.cssText = 'width:1px;height:30px;float:left;background-color:#131';
		msGraph.appendChild( bar );

	}

	var setMode = function ( value ) {

		mode = value;

		switch ( mode ) {

			case 0:
				fpsDiv.style.display = 'block';
				msDiv.style.display = 'none';
				break;
			case 1:
				fpsDiv.style.display = 'none';
				msDiv.style.display = 'block';
				break;
		}

	};

	var updateGraph = function ( dom, value ) {

		var child = dom.appendChild( dom.firstChild );
		child.style.height = value + 'px';

	};

	return {

		REVISION: 12,

		domElement: container,

		setMode: setMode,

		begin: function () {

			startTime = Date.now();

		},

		end: function () {

			var time = Date.now();

			ms = time - startTime;
			msMin = Math.min( msMin, ms );
			msMax = Math.max( msMax, ms );

			msText.textContent = ms + ' MS (' + msMin + '-' + msMax + ')';
			updateGraph( msGraph, Math.min( 30, 30 - ( ms / 200 ) * 30 ) );

			frames ++;

			if ( time > prevTime + 1000 ) {

				fps = Math.round( ( frames * 1000 ) / ( time - prevTime ) );
				fpsMin = Math.min( fpsMin, fps );
				fpsMax = Math.max( fpsMax, fps );

				fpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';
				updateGraph( fpsGraph, Math.min( 30, 30 - ( fps / 100 ) * 30 ) );

				prevTime = time;
				frames = 0;

			}

			return time;

		},

		update: function () {

			startTime = this.end();

		}

	}

};

if ( typeof module === 'object' ) {

	module.exports = Stats;

}
},{}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(1600, 1200, Phaser.AUTO, 'game-template'); // jshint ignore:line


window.Utils = require('./utils/utils');
window.playerState = {
    currentLevel: 'Game'
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
//game.state.add('Game', require('./states/game'));

game.state.start('Boot');
},{"./states/boot":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\states\\boot.js","./states/menu":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\states\\menu.js","./states/preloader":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\states\\preloader.js","./utils/utils":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\utils\\utils.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\panel\\SamplePanel.js":[function(require,module,exports){
/**
 * Created by klimashevsky
 */
var PanelManagerModule = require("arkadium-panelmanager-test");
var GameSettings = require("../GameSettings");
function SamplePanel(game, guiBuilder) {
    'use strict';
    PanelManagerModule.Panel.call(this, game, guiBuilder);
    
}
SamplePanel.NAME = 'SamplePanel';

SamplePanel.prototype = Object.create(PanelManagerModule.Panel.prototype);
SamplePanel.prototype.constructor = SamplePanel;
module.exports = SamplePanel;

SamplePanel.prototype.build = function() {
    'use strict';
    PanelManagerModule.Panel.prototype.build.call(this);
    this.img = new Phaser.Image(this._game,0,0,'gameBackground');
    this.addChild(this.img);

    this.label = new Phaser.BitmapText(this._game, 0, 0, GameSettings.mediumFont, "100", 56);
    this.label.text = "Sample Panel "+ this._data.customData;

    this.label.y = 100;

    this.addChild(this.label);

    console.log("I was Created",this._data.customData);

};

SamplePanel.prototype.destroy= function()
{

    "use strict";
    this.removeChild(this.img,true)
    this.removeChild(this.label,true)
    PanelManagerModule.Panel.prototype.destroy.call(this);
};

SamplePanel.prototype.createShowTransition = function() {
    'use strict';
    return new PanelManagerModule.ShowTransitionMovement(this._game, this, 0, -1000, 0, 0, 500, Phaser.Easing.Linear.None);
};

SamplePanel.prototype.createHideTransition = function() {
    'use strict';
    return new PanelManagerModule.HideTransitionMovement(this._game, this, this.x, this.y - 1000, 500, Phaser.Easing.Linear.None);
};


},{"../GameSettings":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\GameSettings.js","arkadium-panelmanager-test":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\index.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\states\\boot.js":[function(require,module,exports){
var SaveCPU = require("../Plugins/SaveCPU");
var FPSMeter = require("../Plugins/FPSMeter");
var Boot = function () {
};

Boot.prototype = {

    preload: function () {
        "use strict";
        console.log("boot started");
        //JSGameAdapt.Initialize('6d702868-43ea-436b-a461-f288576cd364', 'a880bf88-9f00-4d03-8c23-096130df9bb5', 'http://adapt.as.arkadiumhosted.com/', true);
        this.game.stage.setBackgroundColor("0xffffff");
    },

    create: function () {
        "use strict";
        this.game.scale.scaleMode = Phaser.ScaleManager.RESIZE;
        this.game.scale.pageAlignHorizontally = true;
        this.game.scale.pageAlignVertically = true;
        console.log(this.game.scale.height);
        console.log(this.game.scale.width);
        this.game.plugins.add(SaveCPU);
        //this.game.plugins.add(FPSMeter);
        this.game.state.start('Preloader');
    }
};

module.exports = Boot;

},{"../Plugins/FPSMeter":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\Plugins\\FPSMeter.js","../Plugins/SaveCPU":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\Plugins\\SaveCPU.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\states\\menu.js":[function(require,module,exports){
var PanelManagerModule = require("arkadium-panelmanager-test");
var SamplePanel = require("../panel/SamplePanel");
var GameSettings = require("../GameSettings");
// ========================= Construction =========================
var Menu = function () {
  "use strict";
  this.puzzleInfoList = []; // List of info for all the puzzles that we attempted to load
};


// ========================= Prototype =========================
Menu.prototype = {
  preload: function() {
    "use strict";


  },

  create: function () {
    "use strict";
    document.getElementById('game_preloader').style.visibility = "hidden";

    // ========================= Container =========================

    this.container = new Phaser.Group(this.game,null);
    this.game.add.existing(this.container);

    //in case if you have guibuilder module you can pass it here and use in your panels
    var guiBuilder = null;
    this._panelManager = new PanelManagerModule.PanelManager(this.game,guiBuilder,"landscape");
    this._panelManager.setRoot(this.container)
    this._panelManager.registerPanel("sample_panel",SamplePanel)

    this.label = new Phaser.BitmapText(this.game, 0, 0, GameSettings.mediumFont, "100", 56);
    this.label.text = "CLICK TO OPEN PANEL";
    this.label.tint = 0xb36d43;
    this.game.add.existing(this.label);
    this.opened = false;
    this.game.input.mouse.mouseDownCallback = this.onInputDownHandler.bind(this);


    //this._panelManager.open("sample_panel",{customData:"Bla bla bla"});
    // Add event listeners
    this.onResize();
  },

  onInputDownHandler:function (sprite, pointer) {
  "use strict";
    if(this.opened == true)
    {
      this.label.text = "CLICK TO OPEN PANEL";
      this.opened = false;
      this._panelManager.close("sample_panel");
    }
    else
    {
      this.label.text = "CLICK TO CLOSE PANEL";
      this.opened = true;
      this._panelManager.open("sample_panel", {customData: "Bla bla bla"});
    }

  },

  // ========================= Update =========================
  update: function() {
    "use strict";
  },

  onResize: function() {
    "use strict";
    // We need to call this twice...
  },

  // ========================= Button Event =========================

  startGameScene: function() {
    "use strict";
    // Clear this state and switch to new one
    this.destroy();
    this.game.state.clearCurrentState();
    this.game.state.start('Game');
  },

  // ========================= Destruction =========================
  destroy: function() {
    "use strict";
    this.game.scale.onSizeChange.remove(this.onResize, this);
    this.playButton.destroy();
  }
};

// ========================= Exports =========================
module.exports = Menu;
},{"../GameSettings":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\GameSettings.js","../panel/SamplePanel":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\panel\\SamplePanel.js","arkadium-panelmanager-test":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\arkadium-panelmanager-test\\index.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\states\\preloader.js":[function(require,module,exports){

// ========================= Requirements =========================
var xml = require('XML');
var GameSettings = require("../GameSettings");
var xmlserializer = require('xmlserializer');

// ========================= Construction =========================
var Preloader = function (game) {
    "use strict";
    this.asset = null;
    this.ready = false;
    this.preloadBar = null;
    this.preloadanimationComplete = false;
    this.allPreloadingComplete = false;
};
module.exports = Preloader;


// ========================= Prototype =========================
Preloader.prototype = {

    // region ========================= Preloading =========================
    preload: function () {
        "use strict";
        // Initialize variables
        var currentState = this;
        this.preloadanimationComplete = false;
        this.allPreloadingComplete = false;

        document.getElementById('game_preloader').style.visibility = "visible";
        GameSettings.setAssetSizeMultiplier(this.game);

        // Load the assets used in the game
        this.load.image('gameScrim', 'assets/images/gameScrim.png');
        this.load.image('gameBackground', 'assets/images/gameBackground.jpg');
        this.load.atlas(GameSettings.gameAtlas, 'assets/images/'+GameSettings.assetScale+'x/'+GameSettings.gameAtlas+'.png', 'assets/images/'+GameSettings.assetScale+'x/'+GameSettings.gameAtlas+'.json');
        this.load.atlas(GameSettings.uiAtlas, 'assets/images/'+GameSettings.assetScale+'x/'+GameSettings.uiAtlas+'.png', 'assets/images/'+GameSettings.assetScale+'x/'+GameSettings.uiAtlas+'.json');
        this.load.xml(GameSettings.lightFont + ".fnt", 'assets/fonts/'+GameSettings.lightFont+'.fnt');
        this.load.xml(GameSettings.mediumFont + ".fnt", 'assets/fonts/'+GameSettings.mediumFont+'.fnt');

        // Analytics
        JSGameAdapt.Track.BeginSession();
        JSGameAdapt.Track.PageView(JSGameAdapt.PAGEVIEW_BEGIN_LOADING);

        // DEBUG: These next 3 lines are for debugging, turn this on if you want to remove the animated logo
        if (GameSettings.DEBUG) {
            ARK_gameJQ('#swiffycontainer').removeClass('visible');
            currentState.preloadanimationComplete = true;
            return;
        }

        // Create Swiffy animation
        var swiffyobject = this.getSwiffyData();
        this.stage = new swiffy.Stage(document.getElementById('swiffycontainer'), swiffyobject);
        this.stage.start();
        setTimeout(function (){
            currentState.preloadanimationComplete = true;
            ARK_gameJQ('#swiffycontainer').removeClass('visible');
            document.getElementById('game_preloader').style.visibility="visible";
            currentState.stage.destroy();
            if(currentState.allPreloadingComplete === true){
               currentState.finishedPreloadingAndPreloaderAnimation();
            }},5000 );
        document.getElementById('game_preloader').style.visibility = "hidden";
    },
    // endregion

    // region ========================= Creation =========================
    create: function () {
        "use strict";
        ARK_game_arena_connector.init(); // Initialize arena connection
        this.determineDevice(); // Determine the device that the player is playing on
        this.determineCapability(); // Determine if the device can run certain processes
        this.loadBitmapFonts(); // Load bitmap fonts
        GameSettings.loadOptions(); // Load saved game options
    },

    determineDevice: function() {
        "use strict";
        // First, check if the game is running on desktop
        // "device.desktop" reports inaccurately on Internet Explorer, so we'll assume anyone using IE and not Windows Phone is on a desktop
        if (this.game.device.desktop || (this.game.device.ie && !this.game.device.windowsPhone)) {
            GameSettings.currentDevice = GameSettings.Devices.Desktop;
            GameSettings.maxGridScale = 0.94;
        }
        // The only tablet we can detect accurately is the iPad
        // Otherwise, look at the window size and if it's greater than 800, then consider it a tablet
        else if (this.game.device.iPad || Math.min(window.innerWidth, window.innerHeight) > 800) {
            GameSettings.currentDevice = GameSettings.Devices.Tablet;
            GameSettings.allowClueListToggling = true; // Allow players to manually switch between tablet/phone layouts
            GameSettings.Options.showClueLists = true; // But show clue lists by default
        }
        // We will assume everything else is a phone
        else {
            GameSettings.currentDevice = GameSettings.Devices.Phone;
            GameSettings.allowClueListToggling = true; // Allow players to manually switch between tablet/phone layouts
            GameSettings.Options.showClueLists = false; // But o not show clue lists by default
        }
    },

    determineCapability: function() {
        "use strict";
        if (!this.game.device.webGL || (this.game.renderer instanceof PIXI.CanvasRenderer)) {
            //TODO: add features here that we would like to turn off in low quality environments
        }
        // #fix: We need to manually cull list items if the device does not support masks
        // This specifically fixes Samsung Galaxy stock browsers, which report as Safari
        if (this.game.device.safari) {
            GameSettings.cullListItems = true;
        }
    },

    // endregion

    // region ========================= Fonts =========================
    loadBitmapFonts: function () {
        "use strict";
        this.numFontsToLoad = 2;
        this.loadBitmapFontFromSharedAtlas(GameSettings.gameAtlas, GameSettings.mediumFont+".png", GameSettings.mediumFont);
        this.loadBitmapFontFromSharedAtlas(GameSettings.gameAtlas, GameSettings.lightFont+".png", GameSettings.lightFont);
    },

    loadBitmapFontFromSharedAtlas: function(atlasName, textureFrameName, fontName) {
        "use strict";
        // Get the .fnt file
        var textureData = this.game.cache.getFrameByName(atlasName, textureFrameName);
        var fontXML = this.game.cache.getXML(fontName + ".fnt");

        // Get the first child node.
        // Unfortunately, we need to do this several different ways to support different browser APIs
        var firstChild;
        if (fontXML.children) { firstChild = fontXML.children[0]; }
        else if (fontXML.childNodes) { firstChild = fontXML.childNodes[0]; }
        else if (fontXML.firstElementChild) { firstChild = fontXML.firstElementChild; }

        // Add the texture offset to all characters
        var chars = firstChild.getElementsByTagName("chars");
        var currentNode = chars[0].firstElementChild;
        var info = firstChild.getElementsByTagName("info")[0];
        var padding = info.attributes.padding.value.split(",")[0];

        while (currentNode.nextElementSibling !== null) {
            currentNode.attributes.x.value = textureData.x + Math.ceil((parseInt(currentNode.attributes.x.value) - padding) * GameSettings.assetScale);
            currentNode.attributes.y.value = textureData.y + Math.ceil((parseInt(currentNode.attributes.y.value) - padding) * GameSettings.assetScale);
            currentNode.attributes.width.value = Math.ceil(parseInt(currentNode.attributes.width.value) * GameSettings.assetScale);
            currentNode.attributes.height.value = Math.ceil(parseInt(currentNode.attributes.height.value) * GameSettings.assetScale);
            currentNode.attributes.xoffset.value = Math.ceil(parseInt(currentNode.attributes.xoffset.value) * GameSettings.assetScale);
            currentNode.attributes.yoffset.value = Math.round(parseInt(currentNode.attributes.yoffset.value) * GameSettings.assetScale);
            currentNode.attributes.xadvance.value = Math.ceil(parseInt(currentNode.attributes.xadvance.value) * GameSettings.assetScale);
            currentNode = currentNode.nextElementSibling;
        }

        // Update the common elements as well
        var common = firstChild.getElementsByTagName("common")[0];
        common.attributes.base.value = Math.ceil(parseInt(common.attributes.base.value) * GameSettings.assetScale);
        common.attributes.lineHeight.value = Math.ceil(parseInt(common.attributes.lineHeight.value) * GameSettings.assetScale);
        common.attributes.scaleW.value = Math.ceil(parseInt(common.attributes.scaleW.value) * GameSettings.assetScale);
        common.attributes.scaleH.value = Math.ceil(parseInt(common.attributes.scaleH.value) * GameSettings.assetScale);

        // Convert the XML to a string to be passed into Phaser's loading function
        var fontXMLString = xmlserializer.serializeToString(fontXML);

        // Load the bitmap font with the updated .fnt file
        // We don't actually need to load the entire giant atlas, as we've already loaded it before. Plus we're going to override it anyways.
        // Instead, load a dummy atlas to speed up loading time. Must be the same size, but it's just a single color so it's compressed
        var loader = new Phaser.Loader(this.game);
        loader.bitmapFont(fontName, 'assets/images/'+GameSettings.assetScale+'x/dummyAtlas.jpg', null, fontXMLString);
        loader.onLoadComplete.addOnce(this.onCompleteLoadFont, {currentState:this, atlasName:GameSettings.gameAtlas, fontName:fontName});
        loader.start();
    },

    onCompleteLoadFont: function() {
        "use strict";
        // Override the cached font image with our giant atlas that includes the fonts
        var data = PIXI.BitmapText.fonts[this.fontName];
        var texture = PIXI.TextureCache[this.atlasName];
        var baseTexture = texture.baseTexture;
        for (var prop in data.chars) {
            if (data.chars.hasOwnProperty(prop)) {
                data.chars[prop].texture.baseTexture = baseTexture;
            }
        }

        // Clear the dummy atlas and XMLs from memory
        this.currentState.game.cache.removeImage(this.fontName);
        this.currentState.game.cache.removeXML(this.fontName+".fnt");

        // Check if all fonts have been loaded
        this.currentState.numFontsToLoad--;
        if (this.currentState.numFontsToLoad <= 0) {
            this.currentState.allPreloadingComplete = true;
        }

        // If all loading is done, then move onto the game
        if (this.currentState.preloadanimationComplete === true){
            this.currentState.finishedPreloadingAndPreloaderAnimation();
        }
    },
    // endregion
    finishedPreloadingAndPreloaderAnimation: function(){
        "use strict";
        this.game.state.start('Menu');
    },
    update: function () {
        "use strict";
    },

    // region ========================= Swiffy Animation =========================
    getSwiffyData: function () {
        "use strict";
        var data = "";
        /*
        // Removed sounds from the animation
        if (!WebUtils.isIOS() && !WebUtils.isAndroid()) {
            var browserName = WebUtils.getBrowserName();
            if ((navigator.userAgent.indexOf('Gecko') > -1 && navigator.userAgent.indexOf('KHTML') === -1 && browserName !== "msie")
                || (Object.prototype.toString.call(window.opera) === '[object Opera]')) {
                data = "data:audio/ogg;base64,";
            }
            else {
                data = "data:audio/mpeg;base64,\u003d\u003d";
            }
        }
        */

        return {
            "tags": [{"frames": [], "scenes": [{"name": "Scene 1", "offset": 0}], "type": 23}, {
                "id": 1,
                "data": data,
                "type": 11
            }, {"id": 1, "type": 12}, {"type": 2}, {"type": 2}, {
                "bounds": [{
                    "ymin": 0,
                    "ymax": 2000,
                    "xmin": 0,
                    "xmax": 2000
                }],
                "id": 2,
                "fillstyles": [{"color": [-2555900], "type": 1}],
                "paths": [{
                    "fill": 0,
                    "data": [":00j:b14D:07G93bb93B93b93B07gb:15d93b07gb93b93b07g93bb15d:08g93Bb92b92B92b07Gb:14D92B07Gb93B93B08G93Bc"]
                }],
                "flat": true,
                "type": 1
            }, {
                "tags": [{"id": 2, "matrix": 0, "type": 3, "depth": 1}, {"type": 2}],
                "id": 3,
                "frameCount": 1,
                "type": 7
            }, {
                "id": 3,
                "ratio": 2,
                "matrix": "1012E301y300Y1011E29L168f",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3409E499z498Z3409E28L077e",
                "colortransform": "KiK:K:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "5650E7424b7424B5650E31J066d",
                "colortransform": "VqV:V:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "7733E8099b8097B7733E37G160c",
                "colortransform": "1Cy1C:1C:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "9814E8604b8604B9814E13D62w",
                "colortransform": "0D2c0D:0D:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "1598F8913b8912B1599F3H50p",
                "colortransform": "8D8c8D:8D:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3354F9107b9105B3354F03c55j",
                "colortransform": "5E4d5E:5E:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "4882F9189b9189B4882F86g28f",
                "colortransform": "2F9d2F:2F:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "6176F9192b9191B6175F00m64c",
                "colortransform": "8F4e8F:8F:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "7327F9142b9142B7327F87q0w",
                "colortransform": "3G8e3G:3G:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "8341F9070b9070B8341F12v9r",
                "colortransform": "7G1f7G:7G:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "8093F9079b9079B8093F83z2w",
                "colortransform": "1H4f1H:1H:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "7843F9096b9096B7843F145c60d",
                "colortransform": "5H8f5H:5H:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "7588F9110b9110B7589F540c58h",
                "colortransform": "0I1g0I:0I:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "7330F9122b9122B7330F863c68m",
                "colortransform": "5I5g5I:5I:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "7068F9132b9132B7068F136d52s",
                "colortransform": "0J9g0J:0J:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "6704F9142b9143B6704F381d98y",
                "colortransform": "5J4h5J:5J:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "6432F9146b9147B6432F615d293c",
                "colortransform": "1K8h1K:1K:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "6059F9149b9150B6059F755d054d",
                "colortransform": "7K3i7K:7K:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "5682F9147b9148B5682F818d877d",
                "colortransform": "4L9i4L:4L:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "5396F9138b9139B5396F888d717e",
                "colortransform": "1M4j1M:1M:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "4959F9125b9126B4959F915d610f",
                "colortransform": "8M0k8M:8M:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "5752F060s1388D6008F138e179g",
                "colortransform": "6O5l6O:6O:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "8133H373r373R8135H236e140g",
                "colortransform": "2Q7m2Q:2Q:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "8562H745q746Q8562H441e415f",
                "colortransform": "5Q9m5Q:5Q:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "8941H232q231Q8942H631e776e",
                "colortransform": "7Q1n7Q:7Q:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "9246H799p799P9247H875e223e",
                "colortransform": "9Q3n9Q:9Q:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "9589H296p296P9590H233f818d",
                "colortransform": "1R5n1R:1R:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "9810H958o958O9810H604f514d",
                "colortransform": "3R7n3R:3R:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "0015I631o633O0017I958f301d",
                "colortransform": "5R8n5R:5R:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "0212I315o317O0212I291g188d",
                "colortransform": "6R9n6R:6R:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "0384I111o112O0385I582g157d",
                "colortransform": "7R0o7R:7R:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "1108I918m891M1059I961g268d",
                "colortransform": "8R1o8R:8R:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "1928I496l444L1819I334h546d",
                "colortransform": "9R2o9R:9R:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "2731I899j826J2550I669h940d",
                "colortransform": "0S2o0S:0S:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3491I116i031I3230I996h388e",
                "colortransform": "2S3o2S:2S:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "4204I052g965F3850I229i958e",
                "colortransform": "3S5o3S:3S:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "4797I794d719D4343I335i662f",
                "colortransform": "5S6o5S:5S:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "5240I61w15W4678I472i394g",
                "colortransform": "7S7o7S:7S:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "6182J12f93B5090H626i743g",
                "colortransform": "7S8o7S:7S:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "6763I32o38O6891I634i413g",
                "colortransform": "0T9o0T:0T:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "6231I365c376C6336I741i877f",
                "colortransform": "1T0p1T:1T:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "5667I934d946D5750I857i384f",
                "colortransform": "2T1p2T:2T:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "5064I420f433F5128I013j952e",
                "colortransform": "3T2p3T:3T:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "4482I640g652G4529I233j607e",
                "colortransform": "4T3p4T:4T:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3923I700h710H3955I507j372e",
                "colortransform": "5T4p5T:5T:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3401I611i618I3421I790j243e",
                "colortransform": "6T5p6T:6T:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "2964I294j296J2972I043k184e",
                "colortransform": "7T6p7T:7T:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "2583I953j951J2584I256k158e",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3008I758i755I3009I543k229e",
                "colortransform": "0U9p0U:0U:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3450I430h424H3452I829k434e",
                "colortransform": "4U1q4U:4U:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3862I952f941F3864I079l747e",
                "colortransform": "9U5q9U:9U:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "4221I320e211E4241I283l144f",
                "colortransform": "4V8q4V:4V:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "4516I441c327C4530I449l606f",
                "colortransform": "9V2r9V:9V:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "4696I11n92L4702I577l124g",
                "colortransform": "5W6r5W:5W:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "4729I55G77h4726I656l688g",
                "colortransform": "1X1s1X:1X:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "6635I03C80b5964H638l679g",
                "colortransform": "8X8s8X:8X:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {
                "replace": true,
                "matrix": "8537I:n7193G613l670g",
                "colortransform": "6Y4t6Y:6Y:::",
                "type": 3,
                "depth": 1
            }, {"type": 2}, {"type": 4, "depth": 1}, {
                "bounds": [{"ymin": 0, "ymax": 1861, "xmin": 0, "xmax": 5308}],
                "id": 4,
                "fillstyles": [{"color": [-2555900], "type": 1}],
                "paths": [{
                    "fill": 0,
                    "data": [":51t7ub24d:35i0ib97g1n72m97cb02f7z62e93dbT4k2U3sb3R6g90D8jb9Uw52Dwb62D:79I1Ib69G6M84L96Cb14E0Z74D93Db1d3W14f01Cb3sW08dWc:91E7Ub06C:80E3cb86C6d13F5ob4W2k3Z75bb9B3p3o48cb6q0r23e56cb35g72c33r65eb29g9l35m9lb06c:80e3Cb86c6D13f5Ob4w2K3z75Bb9b3P3O49Cb6Q9Q23E55Cb35G71C33R65Eb29G9L35M9Lc"]
                }],
                "flat": true,
                "type": 1
            }, {
                "tags": [{"id": 4, "matrix": 0, "type": 3, "depth": 1}, {"type": 2}],
                "id": 5,
                "frameCount": 1,
                "type": 7
            }, {"id": 5, "ratio": 60, "matrix": "4422E73O73o4422E605k476g", "type": 3, "depth": 7}, {
                "bounds": [{
                    "ymin": 0,
                    "ymax": 849,
                    "xmin": 0,
                    "xmax": 2043
                }],
                "id": 6,
                "fillstyles": [{"color": [-2555900], "type": 1}],
                "paths": [{
                    "fill": 0,
                    "data": [":78e:b5I:4Rjb23C7c83C8rb0F2o0t24cb1z3q92f4zb04c3f59e3fb2k:4uLb35c9C64c5Rb9b4N2X15Cb71B0Q80F7Zb91B0G40E0Gc"]
                }],
                "flat": true,
                "type": 1
            }, {
                "tags": [{"id": 6, "matrix": 0, "type": 3, "depth": 1}, {"type": 2}],
                "id": 7,
                "frameCount": 1,
                "type": 7
            }, {
                "id": 7,
                "ratio": 60,
                "matrix": "3407C630D630d3407C569k439g",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "2465E41R41r2465E508k462g",
                "type": 3,
                "depth": 7
            }, {
                "replace": true,
                "matrix": "3476C958D174c394Y573k875f",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "9382D78V78v9382D356k441g",
                "type": 3,
                "depth": 7
            }, {
                "replace": true,
                "matrix": "3545C361E41j173R583k366f",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "5179D873B873b5179D147k412g",
                "type": 3,
                "depth": 7
            }, {
                "replace": true,
                "matrix": "3599C649E47N790K595k907e",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "9854C629C629c9854C885j376g",
                "type": 3,
                "depth": 7
            }, {
                "replace": true,
                "matrix": "3654C928E420D264F611k502e",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "bounds": [{"ymin": 0, "ymax": 2924, "xmin": 0, "xmax": 7549}],
                "id": 8,
                "fillstyles": [{"color": [-2555900], "type": 1}],
                "paths": [{
                    "fill": 0,
                    "data": [":956b40cb05f:26m0nb32k9u43s21fb96c7s98e92cb4u6t0r84cb5C9q14C04cb5Z0l07G2qb94B4c27F4cb3P:36CHb44EZ80J0Mb94J2U16R21Fb42C4S11E91Cb6Q5T1N85Cb5c0R74b04Cb1w0L20f1Qb80b7C91e7Cc:27H40Cb45D:45H3eb55E3g85H5xb41C7q91C34db0E7y0t49eb2x82b30g57eb88d76b45k03eb81f5w47n83cb29j0t91r0tb44d:44h3Eb55e4G85h5Xb41c7Q91c34Db0e7Y1T49Eb2X82B29G57Eb88D76B45K03Eb80F5W47N84Cb29J9S90R9Sc"]
                }],
                "flat": true,
                "type": 1
            }, {
                "tags": [{"id": 8, "matrix": 0, "type": 3, "depth": 1}, {"type": 2}],
                "id": 9,
                "frameCount": 1,
                "type": 7
            }, {"id": 9, "ratio": 65, "matrix": "9359E74H74h9359E691k508g", "type": 3, "depth": 5}, {
                "replace": true,
                "matrix": "3407C630D630d3407C566j336g",
                "type": 3,
                "depth": 7
            }, {
                "replace": true,
                "matrix": "3708C198F322G55O627k147e",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "9166D10W10w9166D952j391g",
                "type": 3,
                "depth": 5
            }, {"replace": true, "matrix": "3626C807E807e3626C550j555f", "type": 3, "depth": 7}, {
                "replace": true,
                "matrix": "3742C355F175J54w642k842d",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3407C630D630d3407C810i217g",
                "type": 3,
                "depth": 5
            }, {"replace": true, "matrix": "3856C907F907f3856C537j900e", "type": 3, "depth": 7}, {
                "replace": true,
                "matrix": "3774C503F612L542e656k589d",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3667C207E929d5378C815i506f",
                "type": 3,
                "depth": 5
            }, {"replace": true, "matrix": "4058C744G744g4058C529j361e", "type": 3, "depth": 7}, {
                "replace": true,
                "matrix": "3804C640F977N974g669k388d",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "bounds": [{"ymin": -5044, "ymax": 6340, "xmin": -3899, "xmax": 12304}],
                "id": 10,
                "fillstyles": [{"color": [-16711936], "type": 1}],
                "paths": [{
                    "fill": 0,
                    "data": [":823C044Ea6G652ja54t32ga30q109Db19c82c88m25fb24j2w87v4xb2fa3lab52l:14v4Wb33k74B36o06Ha72n79ta399c484Ha127P00Gc"]
                }],
                "flat": true,
                "type": 1
            }, {"clip": 4, "id": 10, "matrix": "3075C::3075C000j601f", "type": 3, "depth": 1}, {
                "bounds": [{
                    "ymin": 0,
                    "ymax": 3841,
                    "xmin": 0,
                    "xmax": 7495
                }],
                "id": 11,
                "fillstyles": [{"color": [-2555900], "type": 1}],
                "paths": [{
                    "fill": 0,
                    "data": [":::a:13wb1j0q1y39cbi2Nt3Xb6e37E8s08Hb0i4Q2r4Qb1e:3j5eb3n3o4t41fb1f88de25jaG8eb3z8n73e5zbh2U5d26Db3i34E04c20Hb6n8S89b8Sb5f:9l1db6t9l87b98eb0h69dM02jaN6gb49d7g21i7ibj6Hv6Ob2i40E48c31Ib7y90C28e03Dbi:r:b7y:79c61cb7l72c5c12ia2C0pb19c3D89e9Ja6d8Ob5p22E93c99Hb8v78C85c89Cbd:i:b1n:3n21cbb30c3N21hb29c1R63d98Ca35h65Ta::b74D69d35P79eb39C2c08G2cb56G:38P5Mb49L2S29V68Eb23J93C85L16Hc"]
                }],
                "flat": true,
                "type": 1
            }, {
                "tags": [{"id": 11, "matrix": 0, "type": 3, "depth": 1}, {"type": 2}],
                "id": 12,
                "frameCount": 1,
                "type": 7
            }, {"id": 12, "ratio": 69, "matrix": "3407C630D630d3407C943i706g", "type": 3, "depth": 2}, {
                "replace": true,
                "matrix": "3892C736E166e7040C820i907e",
                "type": 3,
                "depth": 5
            }, {"replace": true, "matrix": "4240C425H425h4240C523j943d", "type": 3, "depth": 7}, {
                "replace": true,
                "matrix": "3833C771F717P772i680k238d",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3493C091E091e3493C943i378g",
                "type": 3,
                "depth": 2
            }, {"replace": true, "matrix": "4075C137F295e8394C827i416e", "type": 3, "depth": 5}, {
                "replace": true,
                "matrix": "4390C954H954h4390C518j648d",
                "type": 3,
                "depth": 7
            }, {
                "replace": true,
                "matrix": "3843C919F924Q007k686k140d",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3568C530E530e3568C943i049g",
                "type": 3,
                "depth": 2
            }, {"replace": true, "matrix": "4236C515F428e9457C832i038e", "type": 3, "depth": 5}, {
                "replace": true,
                "matrix": "4474C228I228i4474C516j469d",
                "type": 3,
                "depth": 7
            }, {
                "replace": true,
                "matrix": "3861C912F801J520d639k287d",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3668C072F072f3668C942i725f",
                "type": 3,
                "depth": 2
            }, {"replace": true, "matrix": "4328C666F413e0197D836i759d", "type": 3, "depth": 5}, {
                "replace": true,
                "matrix": "4488C372I372i4488C514j410d",
                "type": 3,
                "depth": 7
            }, {
                "replace": true,
                "matrix": "3886C037G728D01Y601k441d",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3776C612F612f3776C941i403f",
                "type": 3,
                "depth": 2
            }, {"replace": true, "matrix": "4392C797F431e0647D840i596d", "type": 3, "depth": 5}, {
                "replace": true,
                "matrix": "4511C377I377i4511C514j591d",
                "type": 3,
                "depth": 7
            }, {"replace": true, "matrix": "3886C058GB998I570k595d", "type": 3, "depth": 9}, {"type": 2}, {
                "replace": true,
                "matrix": "3872C048G048g3872C941i073f",
                "type": 3,
                "depth": 2
            }, {"replace": true, "matrix": "4412C928F508e0794D839i547d", "type": 3, "depth": 5}, {
                "replace": true,
                "matrix": "4543C504I504i4543C514j777d",
                "type": 3,
                "depth": 7
            }, {
                "replace": true,
                "matrix": "3909C182G573c837Q545k753d",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3997C584G584g3997C941i751e",
                "type": 3,
                "depth": 2
            }, {"replace": true, "matrix": "4438C931F473e0983D840i724d", "type": 3, "depth": 5}, {
                "replace": true,
                "matrix": "4575C630I630i4575C513j962d",
                "type": 3,
                "depth": 7
            }, {
                "replace": true,
                "matrix": "3935C305G114f872Y528k914d",
                "type": 3,
                "depth": 9
            }, {"type": 2}, {
                "replace": true,
                "matrix": "4100C093H093h4100C941i426e",
                "type": 3,
                "depth": 2
            }, {"replace": true, "matrix": "4461C115G579e1169D839i913d", "type": 3, "depth": 5}, {
                "replace": true,
                "matrix": "4568C733I733i4568C511j147e",
                "type": 3,
                "depth": 7
            }, {"replace": true, "matrix": "3928C394G394g3928C519k074e", "type": 3, "depth": 9}, {"type": 2}, {
                "type": 4,
                "depth": 1
            }, {"type": 4, "depth": 2}, {"type": 4, "depth": 5}, {"type": 4, "depth": 7}, {
                "type": 4,
                "depth": 9
            }, {
                "bounds": [{"ymin": 641, "ymax": 6096, "xmin": 343, "xmax": 7878}],
                "id": 13,
                "fillstyles": [{"color": [-2547930], "type": 1}],
                "paths": [{
                    "fill": 0,
                    "data": [":420c63ib76e:57l1la8r5cb52j4t71q62eb70g84c18g23gb1C2t93B35cbL81B67F82Eb25G34C10R95Db70F1J35L1Jb52C:63F9cb86E4g81G5yb7L3P3J23Cb7e80C94h15Eb39c4E24g4Ec:96d10hb15d:07i1gb08h6k48m51cb42e7w02e55db0D8u40F91ba48D9ba0KEb6r2E0u6Ob8b8M9X08Cb86B6Q04G1Zb0Y1E68D1Eb6N:78Bwb22C4e51C3tb8B0o4x11ca7g2db78C3I76F2Vb40E7W02E55Db0d8U39f89Bb4w9B99d9Bc:49L32Kb64E:57J0hb62K0s47L11gb1D2y1r11eb6w76b72g60eb40j50e94y06hb93h7n55p7nb66e:61j1Hb58k7R44l11Gb7h21E53I71Jb52H51D53T04Gb2Z5E41E1Jb93H7N56P7Nc:25W47qa9f95vb9j9p0z30cal2Xb8c28E3q08Hb7h8Q0r8Qb9d:0j0eb4n7n2v30fb4g86d6c19jaE7eb3z8m76e7xbe6U1c25Db8g40E79b24Hb1n5T84b5Tb3f:6l9cb9t9k03c83eb3i50dq95iaL6gb57d6f17i9fbj9Js7Ob6g42E18c36Ib4x93C11e14DboA0cAb8x:75c47cb8m62c2f05ibG6fZ1pb08c2E80e6Lbq3H3d9Ob5n23E63c05Ib5u81C69c00Dbd:h:b0n:3o15cbl37c8K20hb20c5R50d08Da65g77Ta::b59D80d06P23fb53D8e67I8eb37F:67M9Hb67L7O29V93Db26J58C01M72Gc"]
                }],
                "flat": true,
                "type": 1
            }, {
                "tags": [{"id": 13, "matrix": 0, "type": 3, "depth": 2}, {"type": 2}],
                "id": 14,
                "frameCount": 1,
                "type": 7
            }, {
                "id": 14,
                "ratio": 77,
                "matrix": "3652C090F352e7521C667i407d",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3459C827D217d7512C710i251d",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3364C123D590c7526C734i161d",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3333C971C453c7530C738i137d",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3078C442C937b7832C744i235d",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {
                "replace": true,
                "matrix": "2342C61T61p8772C750i545d",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {
                "replace": true,
                "matrix": "1250C9q9L0461D750i070e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {
                "replace": true,
                "matrix": "0031C891c65X3038D762i781e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {
                "replace": true,
                "matrix": "2277C80h93G5546C834i274e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {
                "replace": true,
                "matrix": "3075C::3075C849i100e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {
                "bounds": [{
                    "ymin": 0,
                    "ymax": 9122,
                    "xmin": -280,
                    "xmax": 22006
                }],
                "id": 15,
                "fillstyles": [{"color": [1381515842], "type": 1}],
                "paths": [{"fill": 0, "data": [":041c:a321C122ia286v:a:122Ic"]}],
                "flat": true,
                "type": 1
            }, {
                "tags": [{"id": 15, "matrix": 0, "type": 3, "depth": 1}, {"type": 2}],
                "id": 16,
                "frameCount": 1,
                "type": 7
            }, {
                "clip": 13,
                "id": 16,
                "ratio": 94,
                "matrix": "136S::136S626l432c",
                "type": 3,
                "depth": 1
            }, {
                "bounds": [{"ymin": 332, "ymax": 3081, "xmin": 264, "xmax": 15268}],
                "id": 17,
                "fillstyles": [{"color": [-16777216], "type": 1}],
                "paths": [{
                    "fill": 0,
                    "data": [":099j68cb4L:6V7ib6I3j6I4vb:3m6i9vb2i2i6v2ib0n:6v2Ib3i6H3i9Vb:1M3I4Vb3I7I6V7Ic:517H09ia9z95fa45E:a76b95Fc:044e62db7o:2z9jageb0k5j2k9ya:vbB5n2K4yaGcb5J2k2Z2kb7J:0S0Eb4CQ9G2Fa:Cb6K9J6K8Zb:5O6k72Bb4c3C9g9Eb3h0E0s0Ec:07t:b7o:6z9jaceb4j2j1k9ya:vbG0o1K4yaCcb9J2k6Z2kb0P:9Z2Ka:Cb2K7J2K8Zb:5O2k72Bb4k9J9z9Jc:301G93Ma68J728ba11f:a2u31Ea90i:a0u31ea11f:a71J728Bc:58u00hb14D:53F1lb1R2J28D4Ka:26sa69e:a:17Kb:2J8g9Ob1o6H02d6Hbs:8c:aq:a:71EaI:bG:N:c:1p12Ha:745ba71e:a:14Fa76d14fa26g:a54G69Ia35g47IacCa24G:a62D98ea:12La71E2Uc:861b26ha:1hb8R8G81C8Gb0J:0Ssb88B7e86D4za0I8iaV3cb1Q5x1Q43eb:7ix4tb8c6r7n45cb0f6g2k6la:cb7o7o64c1wa5fpa7eoa0jla1ggas:a6hGa9o7Bb9l1C8x2Jb4v7k64d1ma:14Sc:06t28Ha76E0ua:99fb8Q8G80C8Gb96C:76F83bb81B74b81B74fb:02d81b75fabcb4p2p64c1wa2fpa7o7ba2ggas:a0iGa7o7Bb3n5C0x2Jb1r2j69d6ma:747Bc:6v26ha:21sa72e:a:21Sb9L1h88B1hb0O:84B1Hc:64g:a:83jb:47c6x93eb9o9o57c1ua5m7ba1hga3d:a4gGa0n7Bb9k2D1r6Gb2t0j14d0ka:21Sa71E:a:90jb:5j4G9qaDbb7G8g4R8gb2K:0S8Ga:Bb9G4G9G6Ra:83Jc:285c:b17C:55E9tb3W4T50E4Tb0W:16D9jb2P8G21D7Ja:16sa71e:a:90Jbe5J8g9QacBb8g8G5r8Gb5j:8r8gb9g2g9g1ra:90ja71e:a:00Kb:9I9g8Qa:eb1g9G8r9Gb2k:5r4gaeeb4g1g4g3ra:88ja71e:a:88Jb:45C3X88EaD:a:Bb6W3X88E3Xc"]
                }],
                "flat": true,
                "type": 1
            }, {
                "tags": [{"id": 17, "matrix": 0, "type": 3, "depth": 9}, {"type": 2}],
                "id": 18,
                "frameCount": 1,
                "type": 7
            }, {
                "id": 18,
                "ratio": 94,
                "matrix": "3075C::3075C119e143f",
                "type": 3,
                "depth": 3
            }, {"type": 2}, {"replace": true, "matrix": "136S::136S780k432c", "type": 3, "depth": 1}, {
                "replace": true,
                "matrix": "3075C::3075C132f143f",
                "type": 3,
                "depth": 3
            }, {"replace": true, "matrix": "3075C::3075C991h100e", "type": 3, "depth": 15}, {"type": 2}, {
                "replace": true,
                "matrix": "136S::136S916j432c",
                "type": 3,
                "depth": 1
            }, {"replace": true, "matrix": "3075C::3075C166g143f", "type": 3, "depth": 3}, {
                "replace": true,
                "matrix": "3075C::3075C114h100e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {"replace": true, "matrix": "136S::136S369j432c", "type": 3, "depth": 1}, {
                "replace": true,
                "matrix": "3075C::3075C821g143f",
                "type": 3,
                "depth": 3
            }, {"replace": true, "matrix": "3075C::3075C559g100e", "type": 3, "depth": 15}, {"type": 2}, {
                "replace": true,
                "matrix": "136S::136S978i432c",
                "type": 3,
                "depth": 1
            }, {"replace": true, "matrix": "3075C::3075C289h143f", "type": 3, "depth": 3}, {
                "replace": true,
                "matrix": "3075C::3075C163g100e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {"replace": true, "matrix": "136S::136S682i432c", "type": 3, "depth": 1}, {
                "replace": true,
                "matrix": "3075C::3075C643h143f",
                "type": 3,
                "depth": 3
            }, {"replace": true, "matrix": "3075C::3075C863f100e", "type": 3, "depth": 15}, {"type": 2}, {
                "replace": true,
                "matrix": "136S::136S452i432c",
                "type": 3,
                "depth": 1
            }, {"replace": true, "matrix": "3075C::3075C919h143f", "type": 3, "depth": 3}, {
                "replace": true,
                "matrix": "3075C::3075C629f100e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {"replace": true, "matrix": "136S::136S269i432c", "type": 3, "depth": 1}, {
                "replace": true,
                "matrix": "3075C::3075C138i143f",
                "type": 3,
                "depth": 3
            }, {"replace": true, "matrix": "3075C::3075C444f100e", "type": 3, "depth": 15}, {"type": 2}, {
                "replace": true,
                "matrix": "136S::136S124i432c",
                "type": 3,
                "depth": 1
            }, {"replace": true, "matrix": "3075C::3075C311i143f", "type": 3, "depth": 3}, {
                "replace": true,
                "matrix": "3075C::3075C297f100e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {"replace": true, "matrix": "136S::136S010i432c", "type": 3, "depth": 1}, {
                "replace": true,
                "matrix": "3075C::3075C448i143f",
                "type": 3,
                "depth": 3
            }, {"replace": true, "matrix": "3075C::3075C181f100e", "type": 3, "depth": 15}, {"type": 2}, {
                "replace": true,
                "matrix": "136S::136S921h432c",
                "type": 3,
                "depth": 1
            }, {"replace": true, "matrix": "3075C::3075C555i143f", "type": 3, "depth": 3}, {
                "replace": true,
                "matrix": "3075C::3075C090f100e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {"replace": true, "matrix": "136S::136S853h432c", "type": 3, "depth": 1}, {
                "replace": true,
                "matrix": "3075C::3075C636i143f",
                "type": 3,
                "depth": 3
            }, {"replace": true, "matrix": "3075C::3075C022f100e", "type": 3, "depth": 15}, {"type": 2}, {
                "replace": true,
                "matrix": "136S::136S804h432c",
                "type": 3,
                "depth": 1
            }, {"replace": true, "matrix": "3075C::3075C695i143f", "type": 3, "depth": 3}, {
                "replace": true,
                "matrix": "3075C::3075C972e100e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {"replace": true, "matrix": "136S::136S771h432c", "type": 3, "depth": 1}, {
                "replace": true,
                "matrix": "3075C::3075C734i143f",
                "type": 3,
                "depth": 3
            }, {"replace": true, "matrix": "3075C::3075C938e100e", "type": 3, "depth": 15}, {"type": 2}, {
                "replace": true,
                "matrix": "136S::136S752h432c",
                "type": 3,
                "depth": 1
            }, {"replace": true, "matrix": "3075C::3075C757i143f", "type": 3, "depth": 3}, {
                "replace": true,
                "matrix": "3075C::3075C919e100e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {"replace": true, "matrix": "136S::136S746h432c", "type": 3, "depth": 1}, {
                "replace": true,
                "matrix": "3075C::3075C764i143f",
                "type": 3,
                "depth": 3
            }, {
                "replace": true,
                "matrix": "3075C::3075C912e100e",
                "type": 3,
                "depth": 15
            }, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {"type": 2}, {
                "id": 1,
                "type": 12
            }, {"type": 2}],
            "fileSize": 16915,
            "v": "5.0.0",
            "frameSize": {"ymin": 0, "ymax": 14000, "xmin": 0, "xmax": 24000},
            "frameCount": 262,
            "frameRate": 30,
            "code": "",
            "version": 11
        };
    }
    // endregion
};
},{"../GameSettings":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\GameSettings.js","XML":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\XML\\lib\\xml.js","xmlserializer":"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\node_modules\\xmlserializer\\lib\\serializer.js"}],"e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\utils\\utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        "use strict";
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }
        return false;
    },

    constrain: function(min, value, max) {
        "use strict";
        return Math.max(min, Math.min(value, max));
    },

    cloneObject: function(obj) {
        "use strict";
        if (obj === null || typeof(obj) !== "object") {
            return obj;
        }

        var temp = obj.constructor(); // changed
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                temp[key] = this.cloneObject(obj[key]);
            }
        }
        return temp;
    },

    convertMStoTime: function(ms) {
        "use strict";
        var mins = Math.floor(ms / 60000);
        var secs = Math.floor(ms / 1000) % 60;
        var secString = (secs > 9) ? ("" + secs) : ("0" + secs);
        return mins + ":" + secString;
    },

    countNumDigits: function(n) {
        "use strict";
        var numDigits = 0;
        while (n>=1) {
            n /= 10;
            ++numDigits;
        }
        return numDigits;
    },

    doesFileExist: function(urlToFile)
    {
        "use strict";
        var xhr = new XMLHttpRequest();
        xhr.open('HEAD', urlToFile, false);
        xhr.send();
        if (xhr.status == "404") {//this needs to be a ==
            return false;
        } else {
            return true;
        }
    }
};

module.exports = Utils;
},{}]},{},["e:\\work\\JS\\modules\\html5-module-panelmanager\\sample\\src\\js\\main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
